@page "/commissionerror/commissionerrorUpdate/{id:int}"
@page "/commissionerror/commissionerrorInsert"

@using Blazored.LocalStorage;
@using Microsoft.AspNetCore.Authorization;
@using AutoMapper;

@attribute [Authorize(Policy = ConstantClass.CommissionUpsertRolePolicy)]

@inject ICommissionErrorService commissionErrorService
@inject ICarrierService carrierService
@inject IActivityService activityService
@inject IPremiumModeService premiumModeService
@inject IProductService productService
@inject IProductTypeService productTypeService
@inject ILocalStorageService localStorage
@inject IMapper mapper
@inject ICommissionFinalService commissionFinalService
@inject NavigationManager navigationManager

@if ((_editContext != null) && (_commissionError?.Id == 0))
{
    <h3>New Commission</h3>
}
else if (_editContext != null)
{
    <h3>Update Commission</h3>
}

@if (_saveOperation == true)
{
    <span>Commission Error successfully saved</span>
    <br />
}

<div class="container border mt-2 p-4">
    @if (_editContext != null)
    {
        <EditForm OnValidSubmit="@UpsertCommissionError" EditContext="@_editContext">
            <DataAnnotationsValidator />
            <CustomFormValidator @ref="_customFormValidator" />
            <div class="row mb-3">
                <div class="col">
                    <ValidationSummary />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_commissionError.Carrier.Name)" class="col-2 col-form-label text-end">Carrier</label>
                <div class="col-3">
                    <InputSelect class="form-select"
                             Value="@( (_commissionError = _commissionError ?? new CommissionErrorDTO()).CarrierId)"
                             ValueExpression="@(()=> _commissionError.CarrierId)"
                             ValueChanged="@((int value) => ChangeSelectedCarrier(value) )">
                        <option value="0" disabled="disabled" selected>--Select Carrier--</option>
                        @foreach (var carrier in _carrierList)
                        {
                            <option value="@carrier.Id">@carrier.Name</option>
                        }
                    </InputSelect>
                </div>
                <label for="@nameof(_commissionError.Policy)" class="col-4 col-form-label text-end">Policy</label>
                <div class="col-3">
                    <InputText @bind-Value="_commissionError.Policy" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_commissionError.TransDate)" class="col-2 col-form-label text-end">Trans Date</label>
                <div class="col-3">
                    <InputDate @bind-Value="_commissionError.TransDate" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_commissionError.ProductId)" class="col-2 col-form-label text-end">Product</label>
                <div class="col-3">
                    <InputSelect @bind-Value="_commissionError.ProductId" class="form-select">
                        <option value=-1 disabled="disabled" selected>--Select Product--</option>
                        @foreach (var product in (_productList = _productList ?? new List<ProductDTO>() ))
                        {
                            <option value="@product.Id">@product.Name</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_commissionError.Product.ProductType.Name)" class="col-2 col-form-label text-end">Product Type</label>
                <div class="col-3">
                    <label class="col-form-label">@(_productType?.Name?.ToString())</label>
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_commissionError.PolicyYear)" class="col-2 col-form-label text-end">Policy Year</label>
                <div class="col-3">
                    <InputNumber @bind-Value="_commissionError.PolicyYear" class="form-control" />
                </div>
                <label for="@nameof(_commissionError.CommEffectiveDate)" class="col-4 col-form-label text-end">COMM Effective Date</label>
                <div class="col-3">
                    <InputDate @bind-Value="_commissionError.CommEffectiveDate" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_commissionError.Activity.Description)" class="col-2 col-form-label text-end">Transaction Type</label>
                <div class="col-3">
                    <InputSelect @bind-Value="_commissionError.TransType" class="form-select">
                        <option value=null disabled="disabled" selected>--Select Transaction Type--</option>
                        @foreach (var activity in _activityList)
                        {
                            <option value="@activity.Code">@activity.Description</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_commissionError.CommPremium)" class="col-2 col-form-label text-end">COMM Premium</label>
                <div class="col-3">
                    <InputNumber @bind-Value="_commissionError.CommPremium" class="form-control" step="any" />
                </div>
                <label for="@nameof(_commissionError.CommPremiumMode)" class="col-4 col-form-label text-end">COMM Premium Mode</label>
                <div class="col-3">
                    <InputSelect @bind-Value="_commissionError.CommPremiumMode" class="form-select">
                        <option value=null disabled="disabled" selected>--Select Premium Mode--</option>
                        @foreach (var premiumMode in _premiumModeList)
                        {
                            <option value="@premiumMode.Code">@premiumMode.Description</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_commissionError.CommOverrideRate)" class="col-2 col-form-label text-end">COMM Override Rate</label>
                <div class="col-3">
                    <InputNumber @bind-Value="_commissionError.CommOverrideRate" class="form-control" step="any" />
                </div>
                <label for="@nameof(_commissionError.CommOverridePayment)" class="col-4 col-form-label text-end">COMM Override Payment</label>
                <div class="col-3">
                    <InputNumber @bind-Value="_commissionError.CommOverridePayment" class="form-control" step="any" />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_commissionError.Compensable)" class="col-2 col-form-label text-end">Compensable Indicator</label>
                <div class="col-3">
                    <InputSelect @bind-Value="_commissionError.Compensable" class="form-select">
                        <option value=null disabled="disabled" selected>--Select Indicator--</option>
                        <option value="Y">True</option>
                        <option value="N">False</option>
                    </InputSelect>
                </div>
            </div>
            <div class="row mb-3">
                <div class="offset-5 col-7">
                    <AuthorizeView Policy="@ConstantClass.CommissionUpsertRolePolicy" Context="authorizedContext">
                        <Authorized>
                            <button class="btn btn-primary">Save</button>
                            @if (_commissionError.Id != 0)
                            {
                                var commissionError = _commissionError;

                                <NavLink class="btn btn-primary ms-1" @onclick=" (args) => MoveToFinal(args, commissionError)">Process</NavLink>
                            }
                        </Authorized>
                        <NotAuthorized>
                            <button class="btn btn-primary" disabled>Save</button>
                        </NotAuthorized>
                    </AuthorizeView>
                    <NavLink class="btn btn-secondary" href="commission">Back</NavLink>
                </div>
            </div>
        </EditForm>
    }
</div>

@code {

    #region Parameters

        [Parameter]
        public int Id { get; set; }

    #endregion

    #region Fields

        private CommissionErrorDTO? _commissionError;
        private ProductTypeDTO _productType = new ProductTypeDTO();
        private IEnumerable<CarrierDTO> _carrierList = new List<CarrierDTO>();
        private IEnumerable<ActivityDTO> _activityList = new List<ActivityDTO>();
        private IEnumerable<PremiumModeDTO> _premiumModeList = new List<PremiumModeDTO>();
        private IEnumerable<ProductDTO>? _productList = new List<ProductDTO>();
        private bool _saveOperation = false;
        private CustomFormValidator? _customFormValidator;
        private EditContext? _editContext;

    #endregion    

    #region Constants

        private const string CompensableDefaultValue = "N";
        private const int ProductIdDefaultValue = -1;
        private const string CommissionPage = "commission";

    #endregion

    #region Methods

    protected override async Task OnInitializedAsync()
    {
        await PopulateForm();

        if (@Id == 0)
        {
            _commissionError = new CommissionErrorDTO();
            _commissionError.Compensable = CompensableDefaultValue;
            _commissionError.ProductId = ProductIdDefaultValue;
        }
        else
        {
            _commissionError = await commissionErrorService.GetById(@Id);
            _productType = await productTypeService.GetById(_commissionError?.Product?.ProductTypeId == null ? 0 :
            _commissionError.Product.ProductTypeId);
            await PopulateProductListByCarrierId(_commissionError?.CarrierId == null ? 0 :
            _commissionError.CarrierId);
        }
        _editContext = new(_commissionError = _commissionError ?? new CommissionErrorDTO());
    }

    private async Task MoveToFinal(MouseEventArgs e, CommissionErrorDTO commissionError)
    {
        if ((_editContext != null) && (_editContext.Validate()))
        {
            _customFormValidator?.ClearFormErrors();
            var errors = new Dictionary<string, List<string>>();
            try
            {
                // Update the record
                (_commissionError = _commissionError ?? new CommissionErrorDTO()).ModifiedBy = (await localStorage.GetItemAsync<UserDTO>(ConstantClass.Local_User) as UserDTO).UserName;
                _commissionError.ModifiedDate = System.DateTime.Now;
                CommissionFinalDTO commissionFinal = mapper.Map<CommissionFinalDTO>(commissionError);

                // Create record in final table
                await commissionFinalService.Create(commissionFinal);

                // Delete the record in the error table after inserting in the final table
                await commissionErrorService.Delete(_commissionError.Id);

                navigationManager.NavigateTo(CommissionPage, true);

            }
            catch (Exception ex)
            {
                errors.Add(nameof(_commissionError.Carrier),
                        new() { ex.Message });
                _customFormValidator?.DisplayFormErrors(errors);
            }
        }
    }

    private async Task PopulateForm()
    {
        _carrierList = await carrierService.GetAll();
        _activityList = await activityService.GetAll();
        _premiumModeList = await premiumModeService.GetAll();
    }

    private async Task UpsertCommissionError()
    {
        _customFormValidator?.ClearFormErrors();
        var errors = new Dictionary<string, List<string>>();
        try
        {
            _saveOperation = false;
            if (_commissionError?.Id == 0)
            {
                _commissionError.CreatedBy = (await localStorage.GetItemAsync<UserDTO>(ConstantClass.Local_User) as UserDTO).UserName;
                _commissionError.CreatedDate = System.DateTime.Now;
                _commissionError = await commissionErrorService.Create(_commissionError);
                _saveOperation = true;
            }
            else
            {
                // Update the record
                (_commissionError = _commissionError ?? new CommissionErrorDTO()).ModifiedBy = (await localStorage.GetItemAsync<UserDTO>(ConstantClass.Local_User) as UserDTO).UserName;
                _commissionError.ModifiedDate = System.DateTime.Now;
                await commissionErrorService.Update(_commissionError);
                _saveOperation = true;
            }
            _editContext = new(_commissionError = _commissionError ?? new CommissionErrorDTO());

        }
        catch (Exception ex)
        {
            errors.Add(nameof(_commissionError.Carrier),
                    new() { ex.Message });
            _customFormValidator?.DisplayFormErrors(errors);
            _saveOperation = false;
        }
    }

    private async Task ChangeSelectedCarrier(int carrierId)
    {
        (_commissionError = _commissionError ?? new CommissionErrorDTO()).CarrierId = carrierId;
        await PopulateProductListByCarrierId(carrierId);
        (_commissionError = _commissionError ?? new CommissionErrorDTO()).ProductId = ProductIdDefaultValue;
    }

    private async Task PopulateProductListByCarrierId(int carrierId)
    {
        //Populate the Product dropdownlist based on selected carrier
        _productList = await productService.GetByCarrierId(carrierId);
    }

    #endregion
    
}
