@page "/commission"

@using Microsoft.AspNetCore.Authorization
@using Telerik.DataSource.Extensions;
@using Telerik.DataSource;

@attribute [Authorize(Policy = ConstantClass.CommissionRolePolicy)]

@inject ICommissionErrorService commissionErrorService
@inject IJSRuntime jsRuntime
@inject ICommissionFinalService commissionFinalService
@inject ICommissionService commissionService
@inject ICarrierService carrierService
@inject IActivityService activityService

<h3>Commission</h3>
<br/>

@if (_deleteCommissionErrorOperation == true)
{
    <span class="mt-1 mb-2">Commission Error record successfully deleted</span>
}

@if (_deleteCommissionFinalOperation == true)
{
    <span class="mt-1 mb-2">Commission Final record successfully deleted</span>
}

@if (_errorMessage != null)
{
    <span class="mb-2">@_errorMessage</span>
}

@*
    <p>@ConsoleSim</p>
*@


<div class="container mt-3">

    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="home-tab" data-bs-toggle="tab" data-bs-target="#allTransaction" type="button" role="tab" aria-controls="home" aria-selected="true">All</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile" type="button" role="tab" aria-controls="profile" aria-selected="false">Error</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="contact-tab" data-bs-toggle="tab" data-bs-target="#contact" type="button" role="tab" aria-controls="contact" aria-selected="false">Final</button>
        </li>
    </ul>
    <div class="tab-content" id="myTabContent">
        <div class="tab-pane fade show active" id="allTransaction" role="tabpanel" aria-labelledby="home-tab">
            <div class="container mt-4">
                <AuthorizeView Policy="@ConstantClass.CommissionRolePolicy">
                    <Authorized>
                        @if (_commissionAllList != null)
                        {
                            <TelerikGrid 
                                     TItem="CommissionDTO"           
                                     OnRead="@OnCommissionAllGridRead"
                                     Sortable=true
                                     Pageable=true                                     
                                     FilterMode="@GridFilterMode.FilterRow"
                                     Height="@Height"
                                     @ref="@_commissionAllGrid"
                                     PageSizeChanged="@CommissionAllGridPageSizeChangedHandler"
                                     PageSize="@_commissionAllPageSize"
                                     @bind-Page="@_commissionAllCurrentPage"
                                     SortMode="@SortMode.Multiple">
                                <GridSettings>
                                    <GridPagerSettings PageSizes="@_pageSizes" />
                                </GridSettings>
                                <GridColumns>
                                    <GridColumn Field="TransDate" Title="Trans Date" Width="28px" Context="datasource">
                                        <FilterCellTemplate>
                                            <TelerikDatePicker @bind-Value="@_allFilterTransDate"
                                                           ShowWeekNumbers="false"
                                                           Id="travel-date">
                                            </TelerikDatePicker>
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                CommissionDTO? record = (datasource as CommissionDTO);
                                                @(record?.TransDate?.ToString("MM/dd/yyyy"))
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="Carrier.Name" Title="Carrier" Width="40px" Context="datasource">
                                        <FilterCellTemplate>
                                            <TelerikDropDownList Data="@_carrierList" TextField="Name" ValueField="Id" @bind-Value="_allFilterCarrier"
                                                             Width="25px">
                                            </TelerikDropDownList>
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                CommissionDTO? record = (datasource as CommissionDTO);
                                                @(String.Concat(record?.Carrier?.Name, " (", record?.Carrier?.CarrierCode, ")").ToString())
                                                ;

                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="@nameof(CommissionDTO.Policy)" Title="Policy" Width="25px" Context="datasource">
                                        <FilterCellTemplate>
                                            <TelerikTextBox @bind-Value="@_allFilterPolicy" Width="25px" />
                                        </FilterCellTemplate>
                                        </GridColumn>
                                    <GridColumn Field="Activity.Description" Title="Trans Type" Width="40px" Context="datasource">
                                        <FilterCellTemplate>
                                            <TelerikDropDownList Data="@_activityList" TextField="Description" ValueField="Code" @bind-Value="_allFilterTransType"
                                                             Width="25px" />
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                CommissionDTO? record = (datasource as CommissionDTO);
                                                @(record?.Activity?.Description?.ToString())
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="@nameof(CommissionDTO.CommPremium)" Width="30px" Context="datasource">
                                        <HeaderTemplate>
                                            COMM Premium
                                            <br />
                                            Amount
                                        </HeaderTemplate>
                                        <FilterCellTemplate>
                                            <TelerikNumericTextBox @bind-Value="_allFilterCommPremium" Width="30px" Step="0.01m" Decimals="2" />
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                CommissionDTO? record = (datasource as CommissionDTO);
                                                <div class="text-end">
                                                    @(String.Format("{0:C2}", record?.CommPremium))
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="@nameof(CommissionErrorDTO.CommOverrideRate)" Width="30px" Context="datasource">
                                        <HeaderTemplate>
                                            COMM Premium
                                            <br />
                                            Rate
                                        </HeaderTemplate>
                                        <FilterCellTemplate>
                                            <TelerikNumericTextBox @bind-Value="_allFilterCommOverrideRate"
                                                               Width="30px" Step="0.01m" Decimals="2" />
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                CommissionDTO? record = (datasource as CommissionDTO);
                                                <div class="text-end">
                                                    @(String.Format("{0:P1}", record?.CommOverrideRate))
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="@nameof(CommissionDTO.CommOverridePayment)" Width="30px" Context="datasource">
                                        <HeaderTemplate>
                                            COMM Override
                                            <br />
                                            Payment
                                        </HeaderTemplate>
                                        <FilterCellTemplate>
                                            <TelerikNumericTextBox @bind-Value="_allFilterCommOverridePayment"
                                                               Width="30px" Step="0.01m" Decimals="2" />
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                CommissionDTO? record = (datasource as CommissionDTO);
                                                <div class="text-end">
                                                    @(String.Format("{0:C2}", record?.CommOverridePayment))
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridCommandColumn Width="25px" Context="datasource">
                                        <AuthorizeView Policy="@ConstantClass.CommissionRolePolicy" Context="AuthorizeContext">
                                            <Authorized>
                                                @{
                                                    CommissionDTO? record = (datasource as CommissionDTO);

                                                    if (record?.TableName == EnumClass.Commission.Error)
                                                    {
                                                        <NavLink class="btn btn-primary" href="@($"commissionError/commissionErrorUpdate/{record?.Id}")">Edit</NavLink>
                                                    }
                                                    else if (record?.TableName == EnumClass.Commission.Final)
                                                    {
                                                        <NavLink class="btn btn-primary" href="@($"commissionFinal/commissionFinalUpdate/{record?.Id}")">Edit</NavLink>
                                                    }
                                                }
                                            </Authorized>
                                        </AuthorizeView>
                                    </GridCommandColumn>
                                </GridColumns>
                                <GridToolBarTemplate>
                                    <AuthorizeView Policy="@ConstantClass.CommissionRolePolicy" Context="AuthorizeContext">
                                        <Authorized>
                                                    <div class="justify-content-end" id="GridToolBarTemplateCommissionError">
                                                        <NavLink class="btn btn-success button me-1" @onclick="SearchCommissionAll">Search</NavLink>
                                                        <NavLink class="btn btn-warning button me-1" @onclick="ClearCommissionAll">Clear</NavLink> 
                                                    </div>                                                                                            
                                        </Authorized>
                                    </AuthorizeView>
                                </GridToolBarTemplate>
                            </TelerikGrid>
                        }
                        else
                        {
                            <div class="loader-container">
                                <span class="loader-size-title">Fetching data</span>
                                <TelerikLoader Class="loader-indicator" Type="@LoaderType.ConvergingSpinner" Size="@(ThemeConstants.Loader.Size.Large)"></TelerikLoader>
                            </div>
                        }
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
        <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab">
            <div class="container mt-4">
                <AuthorizeView Policy="@ConstantClass.CommissionRolePolicy">
                    <Authorized>
                        @if (_commissionErrorList != null)
                        {
                            <TelerikGrid TItem="CommissionErrorDTO"
                                     OnRead="@OnCommissionErrorGridRead"
                                     Sortable=true
                                     Pageable=true                                     
                                     FilterMode="@GridFilterMode.FilterRow"
                                     Height="@Height"
                                     @ref="@_commissionErrorGrid"
                                     PageSizeChanged="@CommissionErrorGridPageSizeChangedHandler"
                                     PageSize="@_commissionErrorPageSize"
                                     @bind-Page="@_commissionErrorCurrentPage"
                                     SortMode="@SortMode.Multiple">
                                <GridSettings>
                                    <GridPagerSettings PageSizes="@_pageSizes" />
                                </GridSettings>
                                <GridColumns>
                                    <GridColumn Field="@nameof(CommissionErrorDTO.TransDate)" Title="Trans Date" Width="28px" Context="datasource">
                                        <FilterCellTemplate>
                                            <TelerikDatePicker @bind-Value="@_errorFilterTransDate"
                                                           ShowWeekNumbers="false"
                                                           Id="travel-date">
                                            </TelerikDatePicker>
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                CommissionErrorDTO? record = (datasource as CommissionErrorDTO);
                                                @(record?.TransDate?.ToString("MM/dd/yyyy"))
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="Carrier.Name" Title="Carrier" Width="40px" Context="datasource">
                                        <FilterCellTemplate>
                                            <TelerikDropDownList Data="@_carrierList" TextField="Name" ValueField="Id" @bind-Value="_errorFilterCarrier"
                                                             Width="25px">
                                            </TelerikDropDownList>
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                CommissionErrorDTO? record = (datasource as CommissionErrorDTO);
                                                @(String.Concat(record?.Carrier?.Name, " (", record?.Carrier?.CarrierCode, ")").ToString())
                                                ;
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="@nameof(CommissionErrorDTO.Policy)" Title="Policy" Width="25px" Context="datasource">
                                        <FilterCellTemplate>
                                            <TelerikTextBox @bind-Value="@_errorFilterPolicy" Width="25px" />
                                        </FilterCellTemplate>
                                    </GridColumn>

                                    <GridColumn Field="Activity.Description" Title="Trans Type" Width="40px" Context="datasource">
                                        <FilterCellTemplate>
                                            <TelerikDropDownList Data="@_activityList" TextField="Description" ValueField="Code" @bind-Value="_errorFilterTransType"
                                                             Width="25px" />
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                CommissionErrorDTO? record = (datasource as CommissionErrorDTO);
                                                @(record?.Activity?.Description?.ToString())
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="@nameof(CommissionErrorDTO.CommPremium)" Width="30px" Context="datasource">
                                        <HeaderTemplate>
                                            COMM Premium
                                            <br />
                                            Amount
                                        </HeaderTemplate>
                                        <FilterCellTemplate>
                                            <TelerikNumericTextBox @bind-Value="_errorFilterCommPremium"
                                                               Width="30px" Step="0.01m" Decimals="2" />
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                CommissionErrorDTO? record = (datasource as CommissionErrorDTO);
                                                <div class="text-end">
                                                    @(String.Format("{0:C2}", record?.CommPremium))
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="@nameof(CommissionErrorDTO.CommOverrideRate)" Width="30px" Context="datasource">
                                        <HeaderTemplate>
                                            COMM Premium
                                            <br />
                                            Rate
                                        </HeaderTemplate>
                                        <FilterCellTemplate>
                                            <TelerikNumericTextBox @bind-Value="_errorFilterCommOverrideRate"
                                                               Width="30px" Step="0.01m" Decimals="2" />
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                CommissionErrorDTO? record = (datasource as CommissionErrorDTO);
                                                <div class="text-end">
                                                    @(String.Format("{0:P1}", record?.CommOverrideRate))
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="CommOverridePayment" Width="30px" Context="datasource">
                                        <HeaderTemplate>
                                            COMM Override
                                            <br />
                                            Payment
                                        </HeaderTemplate>
                                        <FilterCellTemplate>
                                            <TelerikNumericTextBox @bind-Value="_errorFilterCommOverridePayment"
                                                               Width="30px" Step="0.01m" Decimals="2" />
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                CommissionErrorDTO? record = (datasource as CommissionErrorDTO);
                                                <div class="text-end">
                                                    @(String.Format("{0:C2}", record?.CommOverridePayment))
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridCommandColumn Width="35px" Context="datasource">
                                        <AuthorizeView Policy="@ConstantClass.CommissionRolePolicy" Context="AuthorizeContext2">
                                            <Authorized>
                                                @{
                                                    CommissionErrorDTO? record = (datasource as CommissionErrorDTO);
                                                    <NavLink class="btn btn-primary" href="@($"commissionError/commissionErrorUpdate/{record?.Id}")">Edit</NavLink>
                                                    <NavLink class="btn btn-secondary" @onclick=" (args) => ConfirmDelete(args, (record?.Id == null ? 0 : record.Id) )">Delete</NavLink>

                                                    <DeleteModal ModalTitle="Commission" BodyText="Are you sure you want to delete this record ?"
                                                         PrimaryButtonText="Delete" SecondaryButtonText="Cancel" Id=@(record?.Id == null ? 0:record.Id)
                                                         SelectedMethod="DeleteCommissionError">
                                                    </DeleteModal>
                                                }
                                            </Authorized>
                                        </AuthorizeView>
                                    </GridCommandColumn>
                                </GridColumns>
                                <GridToolBarTemplate>
                                    <AuthorizeView Policy="@ConstantClass.CommissionRolePolicy" Context="AuthorizeContext">
                                        <Authorized>
                                                    <div class="justify-content-end" id="GridToolBarTemplateCommissionError">
                                                        <NavLink class="btn btn-success button me-1" @onclick="SearchCommissionError">Search</NavLink>
                                                        <NavLink class="btn btn-warning button me-1" @onclick="ClearCommissionError">Clear</NavLink> 
                                                        <NavLink class="btn btn-primary button" href="commissionError/commissionErrorInsert">New</NavLink>
                                                    </div>                                                                                            
                                        </Authorized>
                                    </AuthorizeView>
                                </GridToolBarTemplate>
                            </TelerikGrid>
                        }
                        else
                        {
                            <div class="loader-container">
                                <span class="loader-size-title">Fetching data</span>
                                <TelerikLoader Class="loader-indicator" Type="@LoaderType.ConvergingSpinner" Size="@(ThemeConstants.Loader.Size.Large)"></TelerikLoader>
                            </div>
                        }
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
        <div class="tab-pane fade" id="contact" role="tabpanel" aria-labelledby="contact-tab">
            <div class="container mt-4">
                <AuthorizeView Policy="@ConstantClass.CommissionRolePolicy">
                    <Authorized>
                        @if (_commissionFinalList != null)
                        {
                            <TelerikGrid TItem="CommissionFinalDTO"
                                     OnRead="@OnCommissionFinalGridRead"
                                     Sortable=true
                                     Pageable=true                                     
                                     FilterMode="@GridFilterMode.FilterRow"
                                     Height="@Height"
                                     @ref="@_commissionFinalGrid"
                                     PageSizeChanged="@CommissionFinalGridPageSizeChangedHandler"
                                     PageSize="@_commissionFinalPageSize"
                                     @bind-Page="@_commissionFinalCurrentPage"
                                     SortMode="@SortMode.Multiple">
                                <GridSettings>
                                    <GridPagerSettings PageSizes="@_pageSizes" />
                                </GridSettings>
                                <GridColumns>
                                    <GridColumn Field="@nameof(CommissionFinalDTO.TransDate)" Title="Trans Date" Width="28px" Context="datasource">
                                        <FilterCellTemplate>
                                            <TelerikDatePicker @bind-Value="@_finalFilterTransDate"
                                                           ShowWeekNumbers="false"
                                                           Id="travel-date">
                                            </TelerikDatePicker>
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                CommissionFinalDTO? record = (datasource as CommissionFinalDTO);
                                                @(record?.TransDate?.ToString("MM/dd/yyyy"))
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="Carrier.Name" Title="Carrier" Width="40px" Context="datasource">
                                        <FilterCellTemplate>
                                            <TelerikDropDownList Data="@_carrierList" TextField="Name" ValueField="Id" @bind-Value="_finalFilterCarrier"
                                                             Width="25px">
                                            </TelerikDropDownList>
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                CommissionFinalDTO? record = (datasource as CommissionFinalDTO);
                                                @(String.Concat(record?.Carrier?.Name, " (", record?.Carrier?.CarrierCode, ")").ToString())
                                                ;
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="@nameof(CommissionFinalDTO.Policy)" Title="Policy" Width="25px" >
                                        <FilterCellTemplate Context="datasource">
                                            <TelerikTextBox @bind-Value="@_finalFilterPolicy" Width="25px" />
                                        </FilterCellTemplate>
                                        </GridColumn>
                                    <GridColumn Field="Activity.Description" Title="Trans Type" Width="40px" Context="datasource">
                                        <FilterCellTemplate>
                                            <TelerikDropDownList Data="@_activityList" TextField="Description" ValueField="Code" @bind-Value="_finalFilterTransType"
                                                             Width="25px" />
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                CommissionFinalDTO? record = (datasource as CommissionFinalDTO);
                                                @(record?.Activity?.Description?.ToString())
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="CommPremium" Width="30px" Context="datasource">
                                        <HeaderTemplate>
                                            COMM Premium
                                            <br />
                                            Amount
                                        </HeaderTemplate>
                                        <FilterCellTemplate>
                                            <TelerikNumericTextBox @bind-Value="_finalFilterCommPremium"
                                                               Width="30px" Step="0.01m" Decimals="2" />
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                CommissionFinalDTO? record = (datasource as CommissionFinalDTO);
                                                <div class="text-end">
                                                    @(String.Format("{0:C2}", record?.CommPremium))
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="CommOverrideRate" Width="30px" Context="datasource">
                                        <HeaderTemplate>
                                            COMM Premium
                                            <br />
                                            Rate
                                        </HeaderTemplate>
                                        <FilterCellTemplate>
                                            <TelerikNumericTextBox @bind-Value="_finalFilterCommOverrideRate"
                                                               Width="30px" Step="0.01m" Decimals="2" />
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                CommissionFinalDTO? record = (datasource as CommissionFinalDTO);
                                                <div class="text-end">
                                                    @(String.Format("{0:P1}", record?.CommOverrideRate))
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="CommOverridePayment" Width="30px" Context="datasource">
                                        <HeaderTemplate>
                                            COMM Override
                                            <br />
                                            Payment
                                        </HeaderTemplate>
                                        <FilterCellTemplate>
                                            <TelerikNumericTextBox @bind-Value="_finalFilterCommOverridePayment"
                                                               Width="30px" Step="0.01m" Decimals="2" />
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                CommissionFinalDTO? record = (datasource as CommissionFinalDTO);
                                                <div class="text-end">
                                                    @(String.Format("{0:C2}", record?.CommOverridePayment))
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridCommandColumn Width="35px" Context="datasource">
                                        <AuthorizeView Policy="@ConstantClass.CommissionRolePolicy" Context="AuthorizeContext">
                                            <Authorized>
                                                @{
                                                    CommissionFinalDTO? record = (datasource as CommissionFinalDTO);
                                                    <NavLink class="btn btn-primary" href="@($"commissionFinal/commissionFinalUpdate/{record?.Id}")">Edit</NavLink>
                                                    <NavLink class="btn btn-secondary" @onclick=" (args) => ConfirmDelete(args, record?.Id == null ? 0: record.Id)">Delete</NavLink>

                                                    <DeleteModal ModalTitle="Commission" BodyText="Are you sure you want to delete this record ?"
                                                         PrimaryButtonText="Delete" SecondaryButtonText="Cancel" Id=@(record?.Id == null ? 0 : record.Id )
                                                         SelectedMethod="DeleteCommissionFinal">
                                                    </DeleteModal>
                                                }
                                            </Authorized>
                                        </AuthorizeView>
                                    </GridCommandColumn>
                                </GridColumns>
                                <GridToolBarTemplate>
                                    <AuthorizeView Policy="@ConstantClass.CommissionRolePolicy" Context="AuthorizeContext">
                                        <Authorized>
                                            <div class="justify-content-end" id="GridToolBarTemplateCommissionFinal">
                                                <NavLink class="btn btn-success button me-1" @onclick="SearchCommissionFinal">Search</NavLink>
                                                <NavLink class="btn btn-warning button me-1" @onclick="ClearCommissionFinal">Clear</NavLink>
                                            </div>
                                        </Authorized>
                                    </AuthorizeView>
                                </GridToolBarTemplate>
                            </TelerikGrid>
                        }
                        else
                        {
                            <div class="loader-container">
                                <span class="loader-size-title">Fetching data</span>
                                <TelerikLoader Class="loader-indicator" Type="@LoaderType.ConvergingSpinner" Size="@(ThemeConstants.Loader.Size.Large)"></TelerikLoader>
                            </div>
                        }
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    </div>
</div>

@code {

    #region Fields

    //MarkupString ConsoleSim { get; set; } // to showcase what you get

    private int _activeTabIndex = 0;
    private PagedList<CommissionErrorDTO>? _commissionErrorList;
    private PagedList<CommissionFinalDTO>? _commissionFinalList;
    private PagedList<CommissionDTO>? _commissionAllList;
    private List<int?> _pageSizes => new List<int?> { 5, 10, 25, 50, null };
    private bool _deleteCommissionErrorOperation = false;
    private bool _deleteCommissionFinalOperation = false;
    private string? _errorMessage = null;

    //private int _pageSize = 10; // this will deleted later

    private TelerikGrid<CommissionErrorDTO>? _commissionErrorGrid;
    private TelerikGrid<CommissionDTO>? _commissionAllGrid;
    private TelerikGrid<CommissionFinalDTO>? _commissionFinalGrid;

    private IList<CarrierDTO>? _carrierList;
    private IList<ActivityDTO>? _activityList;


    // Filter values for Commission Error grid
    private int? _errorFilterCarrier = 0;
    private string? _errorFilterPolicy;
    private DateTime? _errorFilterTransDate;
    private string? _errorFilterTransType;
    private decimal? _errorFilterCommPremium;
    private decimal? _errorFilterCommOverrideRate;
    private decimal? _errorFilterCommOverridePayment;

    // Filter values for Commission All grid
    private int? _allFilterCarrier = 0;
    private string? _allFilterPolicy;
    private DateTime? _allFilterTransDate;
    private string? _allFilterTransType;
    private decimal? _allFilterCommPremium;
    private decimal? _allFilterCommOverrideRate;
    private decimal? _allFilterCommOverridePayment;

    // Filter values for Commission Final grid
    private int? _finalFilterCarrier = 0;
    private string? _finalFilterPolicy;
    private DateTime? _finalFilterTransDate;
    private string? _finalFilterTransType;
    private decimal? _finalFilterCommPremium;
    private decimal? _finalFilterCommOverrideRate;
    private decimal? _finalFilterCommOverridePayment;

    private bool _searchCommissionAllFlag = false;
    private CommissionAllSearchParams? _commissionAllSearchParams;
    private int _commissionAllPageSize = 10;
    private int _commissionAllCurrentPage = 1;

    private bool _searchCommissionErrorFlag = false;
    private CommissionErrorSearchParams? _commissionErrorSearchParams;
    private int _commissionErrorPageSize = 10;
    private int _commissionErrorCurrentPage = 1;

    private bool _searchCommissionFinalFlag = false;
    private CommissionFinalSearchParams? _commissionFinalSearchParams;
    private int _commissionFinalPageSize = 10;
    private int _commissionFinalCurrentPage = 1;

    #endregion

    #region Constants

    private const string Height = "400px";

    #endregion

    #region Methods

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await PopulateDropDownList();
        await GetGridData();
        StateHasChanged();
        _commissionErrorSearchParams = new CommissionErrorSearchParams();
        _commissionAllSearchParams = new CommissionAllSearchParams();
        _commissionFinalSearchParams = new CommissionFinalSearchParams();
    }

    private async Task PopulateDropDownList()
    {
        _carrierList = new List<CarrierDTO>();
        IEnumerable<CarrierDTO> _carrierEnumerable = await carrierService.GetAll();
        _carrierList = _carrierEnumerable.ToList();

        _carrierList.Insert(0,
            new CarrierDTO()
                {
                    Id = 0,
                    Name = "All carrier"
                }
        );

        _activityList = new List<ActivityDTO>();
        IEnumerable<ActivityDTO> _activityEnumerable = await activityService.GetAll();
        _activityList = _activityEnumerable.ToList();

        _activityList.Insert(0,
            new ActivityDTO()
                {
                    Code = null,
                    Description = "All Trans Type"
                }
        );
    }

    private async Task GetGridData()
    {
        _commissionAllList = new PagedList<CommissionDTO>();
        _commissionErrorList = new PagedList<CommissionErrorDTO>();
        _commissionFinalList = new PagedList<CommissionFinalDTO>();

        _commissionAllGrid?.Rebind();
        _commissionErrorGrid?.Rebind();
        _commissionFinalGrid?.Rebind();
    }

    private void SearchCommissionError()
    {
        _commissionErrorSearchParams = new CommissionErrorSearchParams(); 
        _searchCommissionErrorFlag = true;
        _commissionErrorGrid?.Rebind();        
    }

    private void SearchCommissionAll()
    {
        _commissionAllSearchParams = new CommissionAllSearchParams(); 
        _searchCommissionAllFlag = true;
        _commissionAllGrid?.Rebind();        
    }

    private void SearchCommissionFinal()
    {
        _commissionFinalSearchParams = new CommissionFinalSearchParams(); 
        _searchCommissionFinalFlag = true;
        _commissionFinalGrid?.Rebind();        
    }

    private void ClearCommissionAll()
    {
        _allFilterCarrier = 0;
        _allFilterPolicy = null;
        _allFilterTransDate = null;
        _allFilterTransType = null;
        _allFilterCommPremium = null;
        _allFilterCommOverrideRate = null;
        _allFilterCommOverridePayment = null;
    }

    private void ClearCommissionError()
    {
        _errorFilterCarrier = 0;
        _errorFilterPolicy = null;
        _errorFilterTransDate = null;
        _errorFilterTransType = null;
        _errorFilterCommPremium = null;
        _errorFilterCommOverrideRate = null;
        _errorFilterCommOverridePayment = null;
    }

    private void ClearCommissionFinal()
    {
        _finalFilterCarrier = 0;
        _finalFilterPolicy = null;
        _finalFilterTransDate = null;
        _finalFilterTransType = null;
        _finalFilterCommPremium = null;
        _finalFilterCommOverrideRate = null;
        _finalFilterCommOverridePayment = null;
    }

    private async Task ConfirmDelete(MouseEventArgs e, int id)
    {
        // modify the function to display modal window
        await jsRuntime.InvokeVoidAsync("DisplayModal", "DeleteModal_" + id.ToString());
    }

    private async Task DeleteCommissionError(int id)
    {
        try
        {
            _deleteCommissionErrorOperation = false;
            _deleteCommissionFinalOperation = false;

            // Perform delete commission
            await commissionErrorService.Delete(id);
            await GetGridData();
            _deleteCommissionErrorOperation = true;
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _deleteCommissionErrorOperation = false;
            _errorMessage = ex.Message.ToString();
        }
    }

    private async Task DeleteCommissionFinal(int id)
    {
        try
        {
            _deleteCommissionFinalOperation = false;
            _deleteCommissionErrorOperation = false;
            // Perform delete commission
            await commissionFinalService.Delete(id);
            await GetGridData();
            _deleteCommissionFinalOperation = true;
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _deleteCommissionFinalOperation = false;
            _errorMessage = ex.Message.ToString();
        }
    }

    protected async Task OnCommissionAllGridRead(GridReadEventArgs args)
    {
        try
        {       
            //string output = string.Empty;
            //output += "SORTS:<br />";
            string? sortValue = null;
            int i = 0;

            foreach (SortDescriptor item in args.Request.Sorts)
            {
                //output += $"field: {item.Member}, direction: {item.SortDirection} <br />";

                if (i != 0 && i < args.Request.Sorts.Count())
                    sortValue = sortValue + ",";

                switch(item.Member)
                {
                    case ConstantClass.CommissionTransactionDate:
                        sortValue = sortValue + ConstantClass.CommissionTransactionDate;
                        break;
                    case ConstantClass.CommissionCarrierName:
                        sortValue = sortValue+ ConstantClass.CommissionCarrierName;
                        break;
                    case ConstantClass.CommissionPolicyNumber:
                        sortValue = sortValue + ConstantClass.CommissionPolicyNumber;
                        break;
                    case ConstantClass.CommissionTransactionType:
                        sortValue = sortValue + ConstantClass.CommissionTransactionType;
                        break;
                    case ConstantClass.CommissionPremiumAmount:
                        sortValue = sortValue + ConstantClass.CommissionPremiumAmount;
                        break;
                    case ConstantClass.CommissionOverrideRate:
                        sortValue = sortValue + ConstantClass.CommissionOverrideRate;
                        break;
                    case ConstantClass.CommissionOverridePayment:
                        sortValue = sortValue + ConstantClass.CommissionOverridePayment;
                        break;
                    default:
                        break;
                }

                switch(item.SortDirection)
                {
                    case ListSortDirection.Ascending:
                        sortValue = sortValue +" "+ ConstantClass.Ascending;
                        break;
                    case ListSortDirection.Descending:
                        sortValue = sortValue +" "+ ConstantClass.Descending;
                        break;
                    default:
                        break;
                }                 

                i++;                
            }
            //output += $"Current page: {args.Request.Page}, page size: {args.Request.PageSize}";

            // show that data in the UI for a visual aid
            //ConsoleSim = new MarkupString(output);

            if (_searchCommissionAllFlag) {

                if (_allFilterTransDate != null)
                {   
                    _commissionAllSearchParams.TransDate = _allFilterTransDate;
                }

                if (_allFilterCarrier != null && _allFilterCarrier != 0)
                {                    
                    _commissionAllSearchParams.CarrierId = _allFilterCarrier;
                }

                if (!String.IsNullOrEmpty(_allFilterPolicy))
                {                    
                    _commissionAllSearchParams.Policy = _allFilterPolicy;
                }

                if (_allFilterTransType != null)
                {                    
                    _commissionAllSearchParams.TransType = _allFilterTransType;
                }

                if (_allFilterCommPremium != null)
                {                    
                    _commissionAllSearchParams.CommPremium = _allFilterCommPremium;
                }

                if (_allFilterCommOverrideRate != null)
                {                    
                    _commissionAllSearchParams.CommOverrideRate = _allFilterCommOverrideRate / 100;
                }

                if (_allFilterCommOverridePayment != null)
                {                    
                    _commissionAllSearchParams.CommOverridePayment = _allFilterCommOverridePayment;
                }

                _commissionAllList = await commissionService.GetAll(new GridParams()
                    {
                        PageNumber = 1,
                        PageSize = args.Request.PageSize
                    },
                    _commissionAllSearchParams,
                    sortValue
                );
                _commissionAllCurrentPage = 1;
                _searchCommissionAllFlag = !_searchCommissionAllFlag;
            }
            else
            {                
                _commissionAllList = await commissionService.GetAll(new GridParams()
                        {
                            PageNumber = args.Request.Page,
                            PageSize = args.Request.PageSize
                        },
                        _commissionAllSearchParams ?? new CommissionAllSearchParams(),
                        sortValue
                );
            }

            args.Data = _commissionAllList;
            args.Total = _commissionAllList.TotalCount;
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message.ToString();
        }
    }

    protected async Task OnCommissionErrorGridRead(GridReadEventArgs args)
    {
        try
        {            
            string? sortValue = null;
            int i = 0;

            foreach (SortDescriptor item in args.Request.Sorts)
            {
                if (i != 0 && i < args.Request.Sorts.Count())
                    sortValue = sortValue + ",";

                switch (item.Member)
                {
                    case ConstantClass.CommissionTransactionDate:
                        sortValue = sortValue + ConstantClass.CommissionTransactionDate;
                        break;
                    case ConstantClass.CommissionCarrierName:
                        sortValue = sortValue + ConstantClass.CommissionCarrierName;
                        break;
                    case ConstantClass.CommissionPolicyNumber:
                        sortValue = sortValue + ConstantClass.CommissionPolicyNumber;
                        break;
                    case ConstantClass.CommissionTransactionType:
                        sortValue = sortValue + ConstantClass.CommissionTransactionType;
                        break;
                    case ConstantClass.CommissionPremiumAmount:
                        sortValue = sortValue + ConstantClass.CommissionPremiumAmount;
                        break;
                    case ConstantClass.CommissionOverrideRate:
                        sortValue = sortValue + ConstantClass.CommissionOverrideRate;
                        break;
                    case ConstantClass.CommissionOverridePayment:
                        sortValue = sortValue + ConstantClass.CommissionOverridePayment;
                        break;
                    default:
                        break;
                }

                switch (item.SortDirection)
                {
                    case ListSortDirection.Ascending:
                        sortValue = sortValue + " " + ConstantClass.Ascending;
                        break;
                    case ListSortDirection.Descending:
                        sortValue = sortValue + " " + ConstantClass.Descending;
                        break;
                    default:
                        break;
                }

                i++;
            }

            if (_searchCommissionErrorFlag) {

                if (_errorFilterTransDate != null)
                {   
                    _commissionErrorSearchParams.TransDate = _errorFilterTransDate;
                }

                if (_errorFilterCarrier != null && _errorFilterCarrier != 0)
                {                    
                    _commissionErrorSearchParams.CarrierId = _errorFilterCarrier;
                }

                if (!String.IsNullOrEmpty(_errorFilterPolicy))
                {                    
                    _commissionErrorSearchParams.Policy = _errorFilterPolicy;
                }

                if (_errorFilterTransType != null)
                {                    
                    _commissionErrorSearchParams.TransType = _errorFilterTransType;
                }

                if (_errorFilterCommPremium != null)
                {                    
                    _commissionErrorSearchParams.CommPremium = _errorFilterCommPremium;
                }

                if (_errorFilterCommOverrideRate != null)
                {                    
                    _commissionErrorSearchParams.CommOverrideRate = _errorFilterCommOverrideRate / 100;
                }

                if (_errorFilterCommOverridePayment != null)
                {                    
                    _commissionErrorSearchParams.CommOverridePayment = _errorFilterCommOverridePayment;
                }

                _commissionErrorList = await commissionErrorService.GetAll(new GridParams()
                    {
                        PageNumber = 1,
                        PageSize = args.Request.PageSize
                    },
                    _commissionErrorSearchParams,
                    sortValue
                );
                _commissionErrorCurrentPage = 1;
                _searchCommissionErrorFlag = !_searchCommissionErrorFlag;
            }
            else
            {                
                _commissionErrorList = await commissionErrorService.GetAll(new GridParams()
                        {
                            PageNumber = args.Request.Page,
                            PageSize = args.Request.PageSize
                        },
                        _commissionErrorSearchParams ?? new CommissionErrorSearchParams(),
                        sortValue
                );
            }

            args.Data = _commissionErrorList;
            args.Total = _commissionErrorList.TotalCount;
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message.ToString();
        }
    }

    protected async Task OnCommissionFinalGridRead(GridReadEventArgs args)
    {
        try
        {
            string? sortValue = null;
            int i = 0;

            foreach (SortDescriptor item in args.Request.Sorts)
            {
                if (i != 0 && i < args.Request.Sorts.Count())
                    sortValue = sortValue + ",";

                switch (item.Member)
                {
                    case ConstantClass.CommissionTransactionDate:
                        sortValue = sortValue + ConstantClass.CommissionTransactionDate;
                        break;
                    case ConstantClass.CommissionCarrierName:
                        sortValue = sortValue + ConstantClass.CommissionCarrierName;
                        break;
                    case ConstantClass.CommissionPolicyNumber:
                        sortValue = sortValue + ConstantClass.CommissionPolicyNumber;
                        break;
                    case ConstantClass.CommissionTransactionType:
                        sortValue = sortValue + ConstantClass.CommissionTransactionType;
                        break;
                    case ConstantClass.CommissionPremiumAmount:
                        sortValue = sortValue + ConstantClass.CommissionPremiumAmount;
                        break;
                    case ConstantClass.CommissionOverrideRate:
                        sortValue = sortValue + ConstantClass.CommissionOverrideRate;
                        break;
                    case ConstantClass.CommissionOverridePayment:
                        sortValue = sortValue + ConstantClass.CommissionOverridePayment;
                        break;
                    default:
                        break;
                }

                switch (item.SortDirection)
                {
                    case ListSortDirection.Ascending:
                        sortValue = sortValue + " " + ConstantClass.Ascending;
                        break;
                    case ListSortDirection.Descending:
                        sortValue = sortValue + " " + ConstantClass.Descending;
                        break;
                    default:
                        break;
                }

                i++;
            }

            if (_searchCommissionFinalFlag)
            {
                if (_finalFilterTransDate != null)
                {
                    _commissionFinalSearchParams.TransDate = _finalFilterTransDate;
                }

                if (_finalFilterCarrier != null && _finalFilterCarrier != 0)
                {
                    _commissionFinalSearchParams.CarrierId = _finalFilterCarrier;
                }

                if (!String.IsNullOrEmpty(_finalFilterPolicy))
                {
                    _commissionFinalSearchParams.Policy = _finalFilterPolicy;
                }

                if (_finalFilterTransType != null)
                {
                    _commissionFinalSearchParams.TransType = _finalFilterTransType;
                }

                if (_finalFilterCommPremium != null)
                {
                    _commissionFinalSearchParams.CommPremium = _finalFilterCommPremium;
                }

                if (_finalFilterCommOverrideRate != null)
                {
                    _commissionFinalSearchParams.CommOverrideRate = _finalFilterCommOverrideRate / 100;
                }

                if (_finalFilterCommOverridePayment != null)
                {
                    _commissionFinalSearchParams.CommOverridePayment = _finalFilterCommOverridePayment;
                }

                _commissionFinalList = await commissionFinalService.GetAll(new GridParams()
                    {
                        PageNumber = 1,
                        PageSize = args.Request.PageSize
                    },
                    _commissionFinalSearchParams,
                    sortValue
                );
                _commissionFinalCurrentPage = 1;
                _searchCommissionFinalFlag = !_searchCommissionFinalFlag;
            }
            else
            {
                _commissionFinalList = await commissionFinalService.GetAll(new GridParams()
                    {
                        PageNumber = args.Request.Page,
                        PageSize = args.Request.PageSize
                    },
                    _commissionFinalSearchParams ?? new CommissionFinalSearchParams(),
                    sortValue
                );
            }

            args.Data = _commissionFinalList;
            args.Total = _commissionFinalList.TotalCount;
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message.ToString();
        }
    }

    private void CommissionAllGridPageSizeChangedHandler(int newPageSize)
    {   
        _commissionAllPageSize = newPageSize;
        _commissionAllCurrentPage = 1;
    }

    private void CommissionErrorGridPageSizeChangedHandler(int newPageSize)
    {   
        _commissionErrorPageSize = newPageSize;
        _commissionErrorCurrentPage = 1;
    }

    private void CommissionFinalGridPageSizeChangedHandler(int newPageSize)
    {   
        _commissionFinalPageSize = newPageSize;
        _commissionFinalCurrentPage = 1;
    }

    #endregion
}


<style>
    .loader-size-title {
        display: block;
        margin-bottom: 10px;
    }

    .loader-container {
        text-align: center;
        width: 100%;
        display: inline-table;
        padding-top: 10px;
        position: center;
        left: 50%;
        height: 400px;
    }

    .button {
        width: 100px;
    }

    #GridToolBarTemplateCommissionError, #GridToolBarTemplateCommissionAll, #GridToolBarTemplateCommissionFinal {
        width: 100%;
    }
</style>
