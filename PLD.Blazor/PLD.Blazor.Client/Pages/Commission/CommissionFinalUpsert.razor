@page "/commissionfinal/commissionfinalUpdate/{id:int}"
@page "/commissionfinal/commissionfinalInsert"

@using Blazored.LocalStorage;
@using Microsoft.AspNetCore.Authorization;
@using AutoMapper;
@attribute [Authorize(Policy = ConstantClass.CommissionUpsertRolePolicy)]

@inject ICommissionFinalService commissionFinalService
@inject ICarrierService carrierService
@inject IActivityService activityService
@inject IPremiumModeService premiumModeService
@inject IProductService productService
@inject IProductTypeService productTypeService
@inject ILocalStorageService localStorage
@inject ICommissionErrorService commissionErrorService
@inject IMapper mapper
@inject NavigationManager navigationManager

@if ((_editContext != null) && (CommissionFinal.Id == 0))
{
    <h3>New Commission</h3>
}
else if (_editContext != null)
{
    <h3>Update Commission</h3>
}

@if (_saveOperation == true)
{
    <span>Commission Final successfully saved</span>
    <br />
}

<div class="container border mt-2 p-4">
    @if (_editContext != null)
    {
        <EditForm EditContext="@_editContext" OnValidSubmit="@UpsertCommissionFinal">
            <DataAnnotationsValidator />
            <CustomFormValidator @ref="_customFormValidator" />
            <div class="row mb-3">
                <div class="col">
                    <ValidationSummary />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(CommissionFinal.Carrier.Name)" class="col-2 col-form-label text-end">Carrier</label>
                <div class="col-3">
                    <InputSelect class="form-select"
                             Value="@CommissionFinal.CarrierId"
                             ValueExpression="@(()=> CommissionFinal.CarrierId)"
                             ValueChanged="@((int value) => ChangeSelectedCarrier(value) )">
                        <option value="0" disabled="disabled" selected>--Select Carrier--</option>
                        @foreach (var carrier in CarrierList)
                        {
                            <option value="@carrier.Id">@carrier.Name</option>
                        }
                    </InputSelect>
                </div>
                <label for="@nameof(CommissionFinal.Policy)" class="col-4 col-form-label text-end">Policy</label>
                <div class="col-3">
                    <InputText @bind-Value="CommissionFinal.Policy" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(CommissionFinal.TransDate)" class="col-2 col-form-label text-end">Trans Date</label>
                <div class="col-3">
                    <InputDate @bind-Value="CommissionFinal.TransDate" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(CommissionFinal.ProductId)" class="col-2 col-form-label text-end">Product</label>
                <div class="col-3">
                    <InputSelect @bind-Value="CommissionFinal.ProductId" class="form-select">
                        <option value=-1 disabled="disabled" selected>--Select Product--</option>
                        @foreach (var product in ProductList)
                        {
                            <option value="@product.Id">@product.Name</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(CommissionFinal.Product.ProductType.Name)" class="col-2 col-form-label text-end">Product Type</label>
                <div class="col-3">
                    <label class="col-form-label">@(ProductType?.Name?.ToString())</label>
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(CommissionFinal.PolicyYear)" class="col-2 col-form-label text-end">Policy Year</label>
                <div class="col-3">
                    <InputNumber @bind-Value="CommissionFinal.PolicyYear" class="form-control" />
                </div>
                <label for="@nameof(CommissionFinal.CommEffectiveDate)" class="col-4 col-form-label text-end">COMM Effective Date</label>
                <div class="col-3">
                    <InputDate @bind-Value="CommissionFinal.CommEffectiveDate" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(CommissionFinal.Activity.Description)" class="col-2 col-form-label text-end">Transaction Type</label>
                <div class="col-3">
                    <InputSelect @bind-Value="CommissionFinal.TransType" class="form-select">
                        <option value=null disabled="disabled" selected>--Select Transaction Type--</option>
                        @foreach (var activity in ActivityList)
                        {
                            <option value="@activity.Code">@activity.Description</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(CommissionFinal.CommPremium)" class="col-2 col-form-label text-end">COMM Premium</label>
                <div class="col-3">
                    <InputNumber @bind-Value="CommissionFinal.CommPremium" class="form-control" step="any" />
                </div>
                <label for="@nameof(CommissionFinal.CommPremiumMode)" class="col-4 col-form-label text-end">COMM Premium Mode</label>
                <div class="col-3">
                    <InputSelect @bind-Value="CommissionFinal.CommPremiumMode" class="form-select">
                        <option value=null disabled="disabled" selected>--Select Premium Mode--</option>
                        @foreach (var premiumMode in PremiumModeList)
                        {
                            <option value="@premiumMode.Code">@premiumMode.Description</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(CommissionFinal.CommOverrideRate)" class="col-2 col-form-label text-end">COMM Override Rate</label>
                <div class="col-3">
                    <InputNumber @bind-Value="CommissionFinal.CommOverrideRate" class="form-control" step="any" />
                </div>
                <label for="@nameof(CommissionFinal.CommOverridePayment)" class="col-4 col-form-label text-end">COMM Override Payment</label>
                <div class="col-3">
                    <InputNumber @bind-Value="CommissionFinal.CommOverridePayment" class="form-control" step="any" />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(CommissionFinal.Compensable)" class="col-2 col-form-label text-end">Compensable Indicator</label>
                <div class="col-3">
                    <InputSelect @bind-Value="CommissionFinal.Compensable" class="form-select">
                        <option value=null disabled="disabled" selected>--Select Indicator--</option>
                        <option value="Y">True</option>
                        <option value="N">False</option>
                    </InputSelect>
                </div>
            </div>
            <div class="row mb-3">
                <div class="offset-5 col-7">
                    <AuthorizeView Policy="@ConstantClass.CommissionUpsertRolePolicy" Context="authorizedContext">
                        <Authorized>
                            <button class="btn btn-primary">Save</button>
                            <NavLink class="btn btn-primary ms-1" @onclick=" (args) => MoveToError(args, CommissionFinal)">Revalidate</NavLink>
                        </Authorized>
                        <NotAuthorized>
                            <button class="btn btn-primary" disabled>Save</button>
                        </NotAuthorized>
                    </AuthorizeView>
                    <NavLink class="btn btn-secondary" href="commission">Back</NavLink>
                </div>
            </div>
        </EditForm>
    }
</div>

@code {

    #region Parameters

    [Parameter]
    public int Id { get; set; }

    #endregion

    #region Properties

    private CommissionFinalDTO CommissionFinal { get; set; } = new CommissionFinalDTO();
    private ProductTypeDTO ProductType { get; set; } = new ProductTypeDTO();
    private IEnumerable<CarrierDTO> CarrierList { get; set; } = new List<CarrierDTO>();
    private IEnumerable<ActivityDTO> ActivityList { get; set; } = new List<ActivityDTO>();
    private IEnumerable<PremiumModeDTO> PremiumModeList { get; set; } = new List<PremiumModeDTO>();
    private IEnumerable<ProductDTO> ProductList { get; set; } = new List<ProductDTO>();

    #endregion

    #region Fields

    private bool _saveOperation = false;
    private CustomFormValidator? _customFormValidator;
    private EditContext? _editContext;

    #endregion

    #region Constants

    private const string _compensableDefaultValue = "N";
    private const int _productIdDefaultValue = -1;
    private const string commissionPage = "commission";

    #endregion

    protected override async Task OnInitializedAsync()
    {
        await PopulateForm();

        if (@Id == 0)
        {
            CommissionFinal = new CommissionFinalDTO();
            CommissionFinal.Compensable = _compensableDefaultValue;
            CommissionFinal.ProductId = _productIdDefaultValue;
        }
        else
        {
            CommissionFinal = await commissionFinalService.GetById(@Id);
            ProductType = await productTypeService.GetById(CommissionFinal.Product.ProductTypeId);
            await PopulateProductListByCarrierId(CommissionFinal.CarrierId);
        }
        _editContext = new(CommissionFinal);
    }

    private async Task PopulateForm()
    {
        CarrierList = await carrierService.GetAll();
        ActivityList = await activityService.GetAll();
        PremiumModeList = await premiumModeService.GetAll();
    }

    private async Task MoveToError(MouseEventArgs e, CommissionFinalDTO commissionFinal)
    {
        // to be fixed
        if ((_editContext != null) && (_editContext.Validate()))
        {
            _customFormValidator?.ClearFormErrors();
            var errors = new Dictionary<string, List<string>>();

            try
            {
                // Update the record
                commissionFinal.ModifiedBy = (await localStorage.GetItemAsync<UserDTO>(ConstantClass.Local_User) as UserDTO).UserName;
                commissionFinal.ModifiedDate = System.DateTime.Now;
                CommissionErrorDTO commissionError = mapper.Map<CommissionErrorDTO>(commissionFinal);

                // Create record in error table
                await commissionErrorService.Create(commissionError);
                await commissionFinalService.Delete(commissionFinal.Id);
                navigationManager.NavigateTo(commissionPage, true);
            }
            catch (Exception ex)
            {
                errors.Add(nameof(CommissionFinal.Carrier),
                        new() { ex.Message });
                _customFormValidator?.DisplayFormErrors(errors);
            }


        }
    }

    private async Task UpsertCommissionFinal()
    {
        _customFormValidator?.ClearFormErrors();
        var errors = new Dictionary<string, List<string>>();
        try
        {
            _saveOperation = false;
            if (CommissionFinal.Id == 0)
            {
                CommissionFinal.CreatedBy = (await localStorage.GetItemAsync<UserDTO>(ConstantClass.Local_User) as UserDTO).UserName;
                CommissionFinal.CreatedDate = System.DateTime.Now;
                CommissionFinal = await commissionFinalService.Create(CommissionFinal);
                _saveOperation = true;
            }
            else
            {
                // Update the record
                CommissionFinal.ModifiedBy = (await localStorage.GetItemAsync<UserDTO>(ConstantClass.Local_User) as UserDTO).UserName;
                CommissionFinal.ModifiedDate = System.DateTime.Now;
                await commissionFinalService.Update(CommissionFinal);
                _saveOperation = true;
            }
            _editContext = new(CommissionFinal);
        }
        catch (Exception ex)
        {
            errors.Add(nameof(CommissionFinal.Carrier),
                    new() { ex.Message });
            _customFormValidator?.DisplayFormErrors(errors);
            _saveOperation = false;
        }
    }

    private async Task ChangeSelectedCarrier(int carrierId)
    {
        CommissionFinal.CarrierId = carrierId;
        await PopulateProductListByCarrierId(carrierId);
        CommissionFinal.ProductId = _productIdDefaultValue;
    }

    private async Task PopulateProductListByCarrierId(int carrierId)
    {
        //Populate the Product dropdownlist based on selected carrier
        ProductList = await productService.GetByCarrierId(carrierId);
    }
}
