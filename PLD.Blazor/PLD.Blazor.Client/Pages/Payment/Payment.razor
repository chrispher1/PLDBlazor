@page "/payment"

@using Microsoft.AspNetCore.Authorization;
@using Telerik.DataSource;

@inject IPaymentService paymentService;
@inject ICarrierService carrierService;
@inject IJSRuntime jsRuntime;

@attribute [Authorize(Policy = ConstantClass.PaymentRolePolicy)]

<h3>Payment</h3>
<br />

@if (_deletePaymentOperation == true)
{
    <span class="mt-1 mb-2">Payment record successfully deleted</span>
}

@if (_errorMessage != null)
{
    <span class="mb-2">@_errorMessage</span>
}

<div class="container mt-3">
    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="payment-tab" data-bs-toggle="tab" data-bs-target="#payment" type="button" role="tab" aria-controls="payment" aria-selected="true">Payment</button>
        </li>
    </ul>
    <div class="tab-content" id="myTabContent">
        <div class="tab-pane fade show active" id="payment" role="tabpanel" aria-labelledby="payment-tab">
            <div class="container mt-4">
                <AuthorizeView Policy="@ConstantClass.PaymentRolePolicy">
                    <Authorized>
                        @if (_paymentList != null)
                        {
                            <TelerikGrid TItem="PaymentDTO"
                                     OnRead="@OnPaymentGridRead"
                                     Sortable=true
                                     Pageable=true
                                     FilterMode="@GridFilterMode.FilterRow"
                                     Height="@Height"
                                     @ref="@_paymentGrid"
                                     PageSizeChanged="@PaymentGridPageSizeChangedHandler"
                                     PageSize="@_paymentPageSize"
                                     @bind-Page="@_paymentCurrentPage"
                                     SortMode="@SortMode.Multiple">
                                <GridSettings>
                                    <GridPagerSettings PageSizes="@_pageSizes" />
                                </GridSettings>
                                <GridColumns>
                                    <GridColumn Field="Carrier.Name" Title="Carrier" Width="40px" Context="datasource">
                                        <FilterCellTemplate>
                                            <TelerikDropDownList Data="@_carrierList" TextField="Name" ValueField="Id" @bind-Value="_paymentFilterCarrier"
                                                             Width="25px">
                                            </TelerikDropDownList>
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                PaymentDTO? record = (datasource as PaymentDTO);
                                                @(String.Concat(record?.Carrier?.Name, " (", record?.Carrier?.CarrierCode, ")").ToString());

                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="PaymentDate" Title="Payment Date" Width="28px" Context="datasource">
                                        <FilterCellTemplate>
                                            <TelerikDatePicker @bind-Value="@_paymentFilterPaymentDate"
                                                           ShowWeekNumbers="false"
                                                           Id="payment-date">
                                            </TelerikDatePicker>
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                PaymentDTO? record = (datasource as PaymentDTO);
                                                @(record?.PaymentDate?.ToString("MM/dd/yyyy"))
                                            }
                                        </Template>
                                    </GridColumn>                                    
                                    <GridColumn Field="@nameof(PaymentDTO.CheckWireNumber)" Title="Check Wire Number" Width="25px" Context="datasource">
                                        <FilterCellTemplate>
                                            <TelerikTextBox @bind-Value="@_paymentFilterCheckWireNumber" Width="25px" />
                                        </FilterCellTemplate>
                                    </GridColumn>
                                    <GridColumn Field="DepositDate" Title="Deposit Date" Width="28px" Context="datasource">
                                        <FilterCellTemplate>
                                            <TelerikDatePicker @bind-Value="@_paymentFilterDepositDate"
                                                           ShowWeekNumbers="false"
                                                           Id="deposit-date">
                                            </TelerikDatePicker>
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                PaymentDTO? record = (datasource as PaymentDTO);
                                                @(record?.DepositDate?.ToString("MM/dd/yyyy"))
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="@nameof(PaymentDTO.EFTOverrideAmount)" Width="30px" Context="datasource">
                                        <HeaderTemplate>
                                            EFT Override
                                            <br />
                                            Amount
                                        </HeaderTemplate>
                                        <FilterCellTemplate>
                                            <TelerikNumericTextBox @bind-Value="_paymentFilterEFTOverrideAmount" Width="30px" Step="0.01m" Decimals="2" />
                                        </FilterCellTemplate>
                                        <Template>
                                            @{
                                                PaymentDTO? record = (datasource as PaymentDTO);
                                                <div class="text-end">
                                                    @(String.Format("{0:C2}", record.EFTOverrideAmount))
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridCommandColumn Width="25px" Context="datasource">
                                        <AuthorizeView Policy="@ConstantClass.PaymentRolePolicy" Context="AuthorizeContext">
                                            <Authorized>
                                                @{
                                                    PaymentDTO? record = (datasource as PaymentDTO);
                                                    <NavLink class="btn btn-primary" href="@($"payment/paymentUpdate/{record?.Id}")">Edit</NavLink>
                                                    <NavLink class="btn btn-secondary" @onclick=" (args) => ConfirmDelete(args, (record?.Id == null ? 0 : record.Id) )">Delete</NavLink>

                                                    <DeleteModal ModalTitle="Payment" BodyText="Are you sure you want to delete this record ?"
                                                         PrimaryButtonText="Delete" SecondaryButtonText="Cancel" Id=@(record?.Id == null ? 0:record.Id)
                                                         SelectedMethod="DeletePayment">
                                                    </DeleteModal>
                                                }
                                            </Authorized>
                                        </AuthorizeView>
                                    </GridCommandColumn>
                                </GridColumns>
                                <GridToolBarTemplate>
                                    <AuthorizeView Policy="@ConstantClass.PaymentRolePolicy" Context="AuthorizeContext">
                                        <Authorized>
                                            <div class="justify-content-end" id="GridToolBarTemplatePayment">
                                                <NavLink class="btn btn-success button me-1" @onclick="ApplySearchPayment">Apply</NavLink>
                                                <NavLink class="btn btn-warning button me-1" @onclick="ClearPayment">Clear</NavLink>
                                                <NavLink class="btn btn-primary button" href="payment/paymentInsert">New</NavLink>
                                            </div>
                                        </Authorized>
                                    </AuthorizeView>
                                </GridToolBarTemplate>
                            </TelerikGrid>
                        }
                        else
                        {
                            <div class="loader-container">
                                <span class="loader-size-title">Fetching data</span>
                                <TelerikLoader Class="loader-indicator" Type="@LoaderType.ConvergingSpinner" Size="@(ThemeConstants.Loader.Size.Large)"></TelerikLoader>
                            </div>
                        }
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    </div>
</div>

@code {
    
    private string? _errorMessage = null;
    private bool _deletePaymentOperation = false;
    private PagedList<PaymentDTO>? _paymentList;

    private TelerikGrid<PaymentDTO>? _paymentGrid;

    private int _paymentPageSize = 10;
    private int _paymentCurrentPage = 1;

    private List<int?> _pageSizes => new List<int?> { 5, 10, 25, 50, null };

    private IList<CarrierDTO>? _carrierList;

    private bool _searchPaymentFlag = false;
    private bool _searchPaymentApplyNewValueFlag = false;

    private PaymentSearchParams? _paymentSearchParams;
    private PaymentSearchParams? _paymentSearchCurrentParams = new PaymentSearchParams();

    // Filter values for Payment grid
    private int? _paymentFilterCarrier = 0;    
    private DateTime? _paymentFilterPaymentDate;
    private string? _paymentFilterCheckWireNumber;
    private DateTime? _paymentFilterDepositDate;
    private decimal? _paymentFilterEFTOverrideAmount;

    #region Constants

    private const string Height = "400px";

    #endregion Constants

    #region Events

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await PopulateDropDownList();
        await GetGridData();
        StateHasChanged();
    }

    #endregion Events

    #region Methods

    private async Task PopulateDropDownList()
    {
        _carrierList = new List<CarrierDTO>();
        IEnumerable<CarrierDTO> _carrierEnumerable = await carrierService.GetAll();
        _carrierList = _carrierEnumerable.ToList();

        _carrierList.Insert(0,
            new CarrierDTO()
                {
                    Id = 0,
                    Name = "All carrier"
                }
        );
    }

    private Task GetGridData()
    {
        _paymentList = new PagedList<PaymentDTO>();

        _paymentGrid?.Rebind();

        return Task.CompletedTask;
    }

    private async Task ConfirmDelete(MouseEventArgs e, int id)
    {
        // modify the function to display modal window
        await jsRuntime.InvokeVoidAsync("DisplayModal", "DeleteModal_" + id.ToString());
    }

    private async Task DeletePayment(int id)
    {
        try
        {
            _deletePaymentOperation = false;
            
            // Perform delete commission
            await paymentService.Delete(id);
            await GetGridData();
            _deletePaymentOperation = true;
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _deletePaymentOperation = false;
            _errorMessage = ex.Message.ToString();
        }
    }

    #endregion Methods

    

    protected async Task OnPaymentGridRead(GridReadEventArgs args)
    {
        try
        {
            string? sortValue = null;
            int i = 0;

            foreach (SortDescriptor item in args.Request.Sorts)
            {

                if (i != 0 && i < args.Request.Sorts.Count())
                    sortValue = sortValue + ",";

                switch (item.Member)
                {
                    case ConstantClass.PaymentCarrierName:
                        sortValue = sortValue + ConstantClass.PaymentCarrierName;
                        break;
                    case ConstantClass.PaymentPaymentDate:
                        sortValue = sortValue + ConstantClass.PaymentPaymentDate;
                        break;
                    case ConstantClass.PaymentCheckWireNumber:
                        sortValue = sortValue + ConstantClass.PaymentCheckWireNumber;
                        break;
                    case ConstantClass.PaymentDepositDate:
                        sortValue = sortValue + ConstantClass.PaymentDepositDate;
                        break;
                    case ConstantClass.PaymentEFTOverrideAmount:
                        sortValue = sortValue + ConstantClass.PaymentEFTOverrideAmount;
                        break;                    
                    default:
                        break;
                }

                switch (item.SortDirection)
                {
                    case ListSortDirection.Ascending:
                        sortValue = sortValue + " " + ConstantClass.Ascending;
                        break;
                    case ListSortDirection.Descending:
                        sortValue = sortValue + " " + ConstantClass.Descending;
                        break;
                    default:
                        break;
                }

                i++;
            }

            //output += $"Current page: {args.Request.Page}, page size: {args.Request.PageSize}";

            // show that data in the UI for a visual aid
            //ConsoleSim = new MarkupString(output);
            _paymentSearchParams = new PaymentSearchParams();

            if (_searchPaymentApplyNewValueFlag)
            {
                // need to use the _commissionAllSearchCurrentParams object to hold the applied filter values on the grid
                // the values assign only on this object will then be passed on the _commissionAllSearchParams object

                _paymentSearchCurrentParams = new PaymentSearchParams();

                //Apply the new filter values
                // Populate the search params object                

                if (_paymentFilterCarrier != null && _paymentFilterCarrier != 0)
                {
                    _paymentSearchCurrentParams.CarrierId = _paymentFilterCarrier;
                }

                if (_paymentFilterPaymentDate != null)
                {
                    _paymentSearchCurrentParams.PaymentDate = _paymentFilterPaymentDate;
                }

                if (!String.IsNullOrEmpty(_paymentFilterCheckWireNumber))
                {
                    _paymentSearchCurrentParams.CheckWireNumber = _paymentFilterCheckWireNumber;
                }

                if (_paymentFilterDepositDate != null)
                {
                    _paymentSearchCurrentParams.DepositDate = _paymentFilterDepositDate;
                }

                if (_paymentFilterEFTOverrideAmount != null)
                {
                    _paymentSearchCurrentParams.EFTOverrideAmount = _paymentFilterEFTOverrideAmount;
                }                

                _searchPaymentApplyNewValueFlag = !_searchPaymentApplyNewValueFlag;
            }

            _paymentSearchParams = _paymentSearchCurrentParams;

            if (_searchPaymentFlag)
            {
                // when clicking the apply button, set the default page number of the grid to page 1
                _paymentList = await paymentService.GetAll(new GridParams()
                    {
                        PageNumber = 1,
                        PageSize = args.Request.PageSize
                    },
                    _paymentSearchParams ??= new PaymentSearchParams(),
                    sortValue
                );
                _paymentCurrentPage = 1;
                _searchPaymentFlag = !_searchPaymentFlag;
            }
            else
            {
                _paymentList = await paymentService.GetAll(new GridParams()
                    {
                        PageNumber = args.Request.Page,
                        PageSize = args.Request.PageSize
                    },
                        _paymentSearchParams ??= new PaymentSearchParams(),
                        sortValue
                );
            }

            args.Data = _paymentList;
            args.Total = (_paymentList ??= new PagedList<PaymentDTO>()).TotalCount;
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message.ToString();
        }
    }

    private void PaymentGridPageSizeChangedHandler(int newPageSize)
    {
        _paymentPageSize = newPageSize;
        _paymentCurrentPage = 1;
    }

    private void ApplySearchPayment()
    {
        _searchPaymentFlag = true;

        // flag the indicator to apply the new value from the grid
        _searchPaymentApplyNewValueFlag = true;

        _paymentGrid?.Rebind();
    }

    private void ClearPayment()
    {
        _paymentFilterCarrier = 0;
        _paymentFilterPaymentDate = null;
        _paymentFilterCheckWireNumber = null;
        _paymentFilterDepositDate = null;
        _paymentFilterEFTOverrideAmount = null;
    }
}

<style>
    .loader-size-title {
        display: block;
        margin-bottom: 10px;
    }

    .loader-container {
        text-align: center;
        width: 100%;
        display: inline-table;
        padding-top: 10px;
        position: center;
        left: 50%;
        height: 400px;
    }

    .button {
        width: 100px;
    }

    #GridToolBarTemplatePayment {
        width: 100%;
    }
</style>
