@page "/carrier/carrierUpdate/{Id:int}"
@page "/carrier/carrierInsert"
@using PLD.Blazor.Common
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = ConstantClass.MaintenanceRolePolicy)]
@inject NavigationManager _INavigationManager
@inject ICarrierService carrierService

@if (@Id == 0)
{
        <h3>New Carrier</h3>
}
else
{
        <h3>Update Carrier</h3>
}

@if (_saveOperation == true)
{
        <span>Carrier successfully saved</span>
        <br/>
}

<div class="container border mt-2 p-4">

    @if (_carrier != null)
    {
            <EditForm Model="@_carrier" OnValidSubmit="@UpsertCarrier">
                <DataAnnotationsValidator />
                <CustomFormValidator @ref="_customFormValidator" />
                <div class="row mb-3">
                    <label for="@nameof(_carrier.CarrierCode)" class="col-4 text-end">Code</label>
                    <div class="col-8">
                        <input type="text" @bind-value="_carrier.CarrierCode" />
                        <ValidationMessage For=" ()=> _carrier.CarrierCode "></ValidationMessage>
                    </div>
                </div>
                <div class="row mb-3">
                    <label for="@nameof(_carrier.Name)" class="col-4 text-end">Name</label>
                    <div class="col-8">
                        <input type="text" @bind-value="_carrier.Name" />
                        <ValidationMessage For=" ()=> _carrier.Name" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="offset-4 col-8">
                        <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy" Context="authorizedContext">
                            <Authorized>
                                <button class="btn btn-primary">Save</button>
                            </Authorized>
                            <NotAuthorized>
                                <button class="btn btn-primary" disabled>Save</button>
                            </NotAuthorized>
                        </AuthorizeView>                    
                        <NavLink class="btn btn-secondary" href="carrier">Back</NavLink>
                    </div>
                </div>
            </EditForm>
    }
</div>


@code {

    #region Parameters

        [Parameter]
        public int Id { get; set; }

    #endregion
    
    #region Fields

        private CarrierDTO? _carrier ;
        private bool _saveOperation = false;
        protected CustomFormValidator? _customFormValidator;

    #endregion


    #region Methods

    protected override async Task OnInitializedAsync()
    {
        if (@Id == 0)
        {
            _carrier = new CarrierDTO();
        }
        else
        {
            // Populate carrier if already exists
            _carrier = await carrierService.GetById(Id);
        }
    }

    private async Task UpsertCarrier()
    {
        _customFormValidator?.ClearFormErrors();
        var errors = new Dictionary<string, List<string>>();
        try
        {
            _saveOperation = false;
            if (_carrier?.Id == 0)
            {
                var record = await carrierService.GetByCode( _carrier?.CarrierCode == null ? String.Empty : _carrier.CarrierCode);
                if (record != null)
                {

                    errors.Add(nameof(_carrier.CarrierCode),
                    new() { ConstantClass.CarrierCannotAddRecordCodeUsed });
                    _customFormValidator?.DisplayFormErrors(errors);
                }
                else
                {
                    // Insert Procedure.
                    if (_carrier?.Id == 0)
                    {
                        _carrier.CreatedBy = ConstantClass.SystemUser;
                        _carrier.CreatedDate = System.DateTime.Now;
                        _carrier = await carrierService.Create(_carrier);
                    }
                    _saveOperation = true;
                }
            }
            else
            {
                var record = await carrierService.GetByCodeAndNotID( _carrier?.CarrierCode == null ? String.Empty : _carrier.CarrierCode , _carrier?.Id == null ? 0 : _carrier.Id);
                if (record != null && record.Any())
                {
                    errors.Add(nameof(_carrier.CarrierCode),
                    new() { ConstantClass.CarrierCannotAddRecordCodeUsed });
                    _customFormValidator?.DisplayFormErrors(errors);
                }
                else
                {
                    // Update the record
                    (_carrier = _carrier ?? new CarrierDTO()).ModifiedBy = ConstantClass.SystemUser;
                    _carrier.ModifiedDate = System.DateTime.Now;
                    await carrierService.Update(_carrier);
                    _saveOperation = true;
                }
            }
        }
        catch (Exception ex)
        {
            errors.Add(nameof(_carrier.CarrierCode),
                    new() { ex.Message });
            _customFormValidator?.DisplayFormErrors(errors);
            _saveOperation = false;
        }
    }

    #endregion
}
