@page "/carrier"
@using Telerik.DataSource.Extensions;
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = ConstantClass.MaintenanceRolePolicy)]
@inject ICarrierService carrierService
@inject IJSRuntime jsRuntime

<h3>Carrier</h3>

@if (_deleteOperation == true)
{
    <span>Carrier successfully deleted</span>
    <br />
}

@if (_errorMessage != null)
{
    <span>@_errorMessage</span>
    <br />
    <br />
}

@if (_carrierList != null)
{
    <TelerikGrid Data=@_carrierList
             Sortable=true
             Pageable=true
             @bind-PageSize="@_pageSize"
             FilterMode="@GridFilterMode.FilterRow"
             Height=@Height>
        <GridSettings>
            <GridPagerSettings PageSizes="@_pageSizes" />
        </GridSettings>
        <GridColumns>
            <GridColumn Field="@nameof(CarrierDTO.Id)" Title="Id" Visible=false>
                <Template><input type="hidden" asp-for="@nameof(CarrierDTO.Id)"> </Template>
            </GridColumn>
            <GridColumn Field="@nameof(CarrierDTO.CarrierCode)" Title="Code" Width="50px">
            </GridColumn>
            <GridColumn Field="@nameof(CarrierDTO.Name)" Title="Name" Width="195px" />
            <GridCommandColumn Width="35px" Context="carrierContext">
                <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy">
                    <Authorized>
                        @{
                            CarrierDTO? record = (carrierContext as CarrierDTO);
                            <NavLink class="btn btn-primary" href="@($"carrier/carrierUpdate/{record?.Id}")">Edit</NavLink>
                            <NavLink class="btn btn-secondary" @onclick=" args => ConfirmDelete(args, record?.Id == null ? 0 : record.Id)">Delete</NavLink>
                            <DeleteModal ModalTitle="Carrier" BodyText="Are you sure you want to delete this carrier ?"
                                 PrimaryButtonText="Delete" SecondaryButtonText="Cancel" Id=@(record?.Id == null ? 0 : record.Id)
                                 SelectedMethod="DeleteCarrier">
                            </DeleteModal>
                        }
                    </Authorized>
                </AuthorizeView>
            </GridCommandColumn>
        </GridColumns>
        <GridToolBar>
            <div class="col d-flex justify-content-end">
                <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy">
                    <Authorized>
                        <div>
                            <NavLink class="btn btn-primary" href="carrier/carrierInsert">New</NavLink>
                        </div>
                    </Authorized>
                </AuthorizeView>
            </div>
        </GridToolBar>
    </TelerikGrid>
}
else
{
    <div class="loader-container">
        <span class="loader-size-title">Fetching data</span>
        <TelerikLoader Class="loader-indicator" Type="@LoaderType.ConvergingSpinner" Size="@(ThemeConstants.Loader.Size.Large)"></TelerikLoader>
    </div>
}

@code {

    #region Fields
        
        private IEnumerable<CarrierDTO>? _carrierList;
        private int _pageSize = 10;
        private List<int?> _pageSizes => new List<int?> { 5, 10, 25, 50, null };
        private bool _deleteOperation = false;
        private string? _errorMessage = null;

    #endregion

    #region Constants
    
        private const string Height = "400px";

    #endregion

    #region Methods

        protected override async Task OnInitializedAsync()
        {
            await GetGridData();
        }

        private async Task GetGridData()
        {
            _carrierList = await carrierService.GetAll();
        }

        private async Task ConfirmDelete(MouseEventArgs e, int id)
        {
            // modify the function to display modal window
            await jsRuntime.InvokeVoidAsync("DisplayModal", "DeleteModal_" + id.ToString());
        }

        private async Task DeleteCarrier(int id)
        {
            try
            {
                _deleteOperation = false;
                // Perform delete carrier
                await carrierService.Delete(id);
                await GetGridData();
                _deleteOperation = true;
                _errorMessage = null;
            }
            catch (Exception ex)
            {
                _deleteOperation = false;
                _errorMessage = ex.Message.ToString();
            }
        }

    #endregion
    
    
}

<style>
    .loader-size-title {
        display: block;
        margin-bottom: 10px;
    }

    .loader-container {
        text-align: center;
        width: 150px;
        display: inline-table;
        padding-top: 10px;
        position: absolute;
        left: 50%;
    }
</style>
