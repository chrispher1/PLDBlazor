@page "/case/caseInsert"
@page "/case/caseUpdate/{Id:int}"

@using Microsoft.AspNetCore.Authorization;
@using Blazored.LocalStorage;

@attribute [Authorize(Policy = ConstantClass.CaseRolePolicy)]

@inject ICarrierService carrierService;
@inject IProductService productService;
@inject ICaseStatusService caseStatusService;
@inject ICaseTypeService caseTypeService;
@inject ICaseService caseService;
@inject IProductTypeService productTypeService;
@inject ILocalStorageService localStorage;

@if ((_editContext != null) && (_case?.Id == 0))
{
    <h3>New Case</h3>
}
else if (_editContext != null)
{
    <h3>Update Case</h3>
}

@if (_saveOperation == true)
{
    <span>Case successfully saved</span>
    <br />
}

<div class="container border mt-2 p-4">
    @if(_editContext != null)
    {
        <EditForm OnValidSubmit="@UpsertCase" EditContext="@_editContext">
            <DataAnnotationsValidator />
            <CustomFormValidator @ref="_customFormValidator" />
            <div class="row mb-3">
                <div class="col">
                    <ValidationSummary />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_case.Carrier.Name)" class="col-2 col-form-label text-end">Carrier</label>
                <div class="col-3">
                    <InputSelect class="form-select"
                             Value="@((_case = _case ?? new CaseDTO() ).CarrierId)"
                             ValueExpression="@(()=> _case.CarrierId)"
                             ValueChanged="@((int value) => ChangeSelectedCarrier(value) )">
                        <option value="0" disabled="disabled" selected>--Select Carrier--</option>
                        @foreach (var carrier in _carrierList)
                        {
                            <option value="@carrier.Id">@carrier.Name</option>
                        }
                    </InputSelect>
                </div>
                <label for="@nameof(_case.Policy)" class="col-4 col-form-label text-end">Policy</label>
                <div class="col-3">
                    <InputText @bind-Value="_case.Policy" class="form-control"></InputText>
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_case.StatusId)" class="col-2 col-form-label text-end">Status</label>
                <div class="col-3">
                    <InputSelect @bind-Value="_case.StatusId" class="form-select">
                        <option value="0" disabled="disabled" selected>--Select Status--</option>
                        @foreach (var caseStatus in (_caseStatusList = _caseStatusList ?? new List<CaseStatusDTO>()))
                        {
                            <option value="@caseStatus.Id">@caseStatus.Name</option>
                        }
                    </InputSelect>                    
                </div>
                <label for="@nameof(_case.Product.Name)" class="col-4 col-form-label text-end">Product</label>
                <div class="col-3">
                    <InputSelect class="form-select"                             
                             Value="@(_case.ProductId)"
                             ValueExpression="@(()=> _case.ProductId)"
                             ValueChanged="@((int value) => ChangeSelectedProduct(value) )"
                    >
                        <option value=-1 disabled="disabled" selected>--Select Product--</option>
                        @foreach (var product in (_productList = _productList ?? new List<ProductDTO>()))
                        {
                            <option value="@product.Id">@product.Name</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_case.ProductType.Name)" class="col-2 col-form-label text-end">Product Type</label>
                <div class="col-3">
                    <label class="col-form-label">@(_productType?.Name?.ToString())</label>
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_case.FaceAmount)" class="col-2 col-form-label text-end">Face Amount</label>
                <div class="col-3">
                    <InputNumber @bind-Value="_case.FaceAmount" class="form-control" step="any" />
                </div>
                <label for="@nameof(_case.AnnualizedPremium)" class="col-4 col-form-label text-end">Annualized Premium Amount</label>
                <div class="col-3">
                    <InputNumber @bind-Value="_case.AnnualizedPremium" class="form-control" step="any" />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_case.TargetPremium)" class="col-2 col-form-label text-end">Target Premium Amount</label>
                <div class="col-3">
                    <InputNumber @bind-Value="_case.TargetPremium" class="form-control" step="any" />
                </div>
                <label for="@nameof(_case.ModalPremium)" class="col-4 col-form-label text-end">Modal Premium Amount</label>
                <div class="col-3">
                    <InputNumber @bind-Value="_case.ModalPremium" class="form-control" step="any" />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_case.PlacementDate)" class="col-2 col-form-label text-end">Placement Date</label>
                <div class="col-3">
                    <InputDate @bind-Value="_case.PlacementDate" class="form-control" />
                </div>
                <label for="@nameof(_case.CaseType)" class="col-4 col-form-label text-end">Case Type</label>
                <div class="col-3">
                    <InputSelect class="form-select"
                             @bind-Value="_case.TypeId">
                        <option value="0" disabled="disabled" selected>--Select Case Type--</option>   
                        @foreach( var caseType in (_caseTypeList = _caseTypeList ?? new List<CaseTypeDTO>())) {
                            <option value="@caseType.Id">@caseType.Name</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_case.ClientFirstName)" class="col-2 col-form-label text-end">Client First Name</label>
                <div class="col-3">
                    <InputText type="text" @bind-Value="_case.ClientFirstName" class="form-control" />
                </div>
                <label for="@nameof(_case.ClientLastName)" class="col-4 col-form-label text-end">Client Last Name</label>
                <div class="col-3">
                    <InputText type="text" @bind-Value="_case.ClientLastName" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="offset-5 col-7">
                    <AuthorizeView Policy="@ConstantClass.CaseUpsertRolePolicy" Context="authorizedContext">
                        <Authorized>
                            <button class="btn btn-primary">Save</button>                            
                        </Authorized>
                        <NotAuthorized>
                            <button class="btn btn-primary" disabled>Save</button>
                        </NotAuthorized>
                    </AuthorizeView>
                    <NavLink class="btn btn-secondary" href="case">Back</NavLink>
                </div>
            </div>
        </EditForm>
    }
    
</div>

@code {

    #region Parameters

    [Parameter]
    public int Id { get; set; }

    #endregion Parameters

    #region Fields

    private EditContext? _editContext;
    private CaseDTO? _case;
    private ProductTypeDTO? _productType = new ProductTypeDTO();
    private IEnumerable<CarrierDTO> _carrierList = new List<CarrierDTO>();
    private IEnumerable<ProductDTO>? _productList = new List<ProductDTO>();
    private IEnumerable<CaseStatusDTO>? _caseStatusList = new List<CaseStatusDTO>();
    private IEnumerable<CaseTypeDTO>? _caseTypeList = new List<CaseTypeDTO>();
    private CustomFormValidator? _customFormValidator;
    private bool _saveOperation = false;

    #endregion Fields

    #region Constants

    private const int ProductIdDefaultValue = -1;
    private const int ProductTypeIdDefaultValue = 0;

    #endregion Constants

    #region Events

        protected override async Task OnInitializedAsync()
        {
            await PopulateForm();

            if (Id == 0)
            {
                _case = new CaseDTO();
                _case.ProductId = ProductIdDefaultValue;
            }
            else
            {
                _case = await caseService.GetById(Id);
                await PopulateProductListByCarrierId(_case?.CarrierId == null ? 0 :
                _case.CarrierId);
                _productType = await productTypeService.GetById(_case?.ProductTypeId == null ? 0 :
                _case.ProductTypeId);


            }

            _editContext = new(_case = _case ?? new CaseDTO());
        }

    #endregion Events

    #region Methods    

    private async Task PopulateForm()
    {
        _carrierList = await carrierService.GetAll();
        _caseStatusList = await caseStatusService.GetAll();
        _caseTypeList = await caseTypeService.GetAll();
    }

    private async Task ChangeSelectedCarrier(int carrierId)
    {
        (_case = _case ?? new CaseDTO()).CarrierId = carrierId;
        await PopulateProductListByCarrierId(carrierId);
        (_case ??= new CaseDTO()).ProductId = ProductIdDefaultValue;
        _productType = new ProductTypeDTO();
        _case.ProductTypeId = ProductTypeIdDefaultValue;
    }

    private async Task PopulateProductListByCarrierId(int carrierId)
    {
        //Populate the Product dropdownlist based on selected carrier
        _productList = await productService.GetByCarrierId(carrierId);
    }

    private async Task ChangeSelectedProduct(int productId) {

        (_case = _case ?? new CaseDTO()).ProductId = productId;
        ProductDTO? product = await productService.GetById(productId);
        _productType = product.ProductType ?? new ProductTypeDTO();
        _case.ProductTypeId = _productType.Id;
    }

    private async Task UpsertCase() {

        _customFormValidator?.ClearFormErrors();
        var errors = new Dictionary<string, List<string>>();

        try
        {
            _saveOperation = false;
            if(Id == 0) {

                _case.CreatedBy = (await localStorage.GetItemAsync<UserDTO>(ConstantClass.Local_User) as UserDTO).UserName;
                _case.CreatedDate = System.DateTime.Now;
                _case = await caseService.Create(_case);
                Id = _case.Id;
                _saveOperation = true;
            }
            else
            {
                // Update the record
                (_case = _case ?? new CaseDTO()).ModifiedBy = (await localStorage.GetItemAsync<UserDTO>(ConstantClass.Local_User) as UserDTO).UserName;
                _case.ModifiedDate = System.DateTime.Now;
                await caseService.Update(_case);
                _saveOperation = true;
            }
            _editContext = new(_case ??= new CaseDTO());

        }
        catch( Exception ex)
        {
            errors.Add(nameof(_case.CarrierId),
                    new() { ex.Message });
            _customFormValidator?.DisplayFormErrors(errors);
            _saveOperation = false;
        }
    }

    #endregion Nethods
}
