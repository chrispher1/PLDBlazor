@page "/activity"
@using Microsoft.AspNetCore.Authorization
@using Telerik.DataSource.Extensions;
@attribute [Authorize(Policy = ConstantClass.MaintenanceRolePolicy)]
@inject IActivityService activityService
@inject IJSRuntime jsRuntime

<h3>Transaction Type</h3>

@if (_deleteOperation == true)
{
    <span>Transaction Type successfully deleted</span>
    <br />
}

@if (_errorMessage != null)
{
    <span>@_errorMessage</span>
    <br />
    <br />
}

@if (_activityList != null)
{
    <TelerikGrid Data=@_activityList
             Sortable=true
             Pageable=true
             @bind-PageSize="@_pageSize"
             FilterMode="@GridFilterMode.FilterRow"
             Height=@Height>
        <GridSettings>
            <GridPagerSettings PageSizes="@_pageSizes" />
        </GridSettings>
        <GridColumns>
            <GridColumn Field="@nameof(ActivityDTO.Code)" Title="Code" Width="50px">
            </GridColumn>
            <GridColumn Field="@nameof(ActivityDTO.Description)" Title="Description" Width="195px" />
            <GridCommandColumn Width="35px" Context="activityContext">
                <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy">
                    <Authorized>
                        @{
                            ActivityDTO? record = (activityContext as ActivityDTO);

                            <NavLink class="btn btn-primary" href="@($"activity/activityUpdate/Edit/{record?.Code}")">Edit</NavLink>
                            <NavLink class="btn btn-secondary" @onclick=" args => ConfirmDelete(args, record?.Code == null ? String.Empty : record.Code)">Delete</NavLink>
                            <DeleteModal ModalTitle="Transacton Type" BodyText="Are you sure you want to delete this transaction type ?"
                                 PrimaryButtonText="Delete" SecondaryButtonText="Cancel" Code="@record?.Code"
                                 SelectedMethodForString="DeleteActivity">
                            </DeleteModal>
                        }
                    </Authorized>
                </AuthorizeView>

            </GridCommandColumn>
        </GridColumns>
        <GridToolBarTemplate>
            <div class="col d-flex justify-content-end">
                <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy">
                    <Authorized>
                        <div>
                            <NavLink class="btn btn-primary" href="activity/activityInsert/Add">New</NavLink>
                        </div>
                    </Authorized>
                </AuthorizeView>
            </div>
        </GridToolBarTemplate>
    </TelerikGrid>
}
else
{
    <div class="loader-container">
        <span class="loader-size-title">Fetching data</span>
        <TelerikLoader Class="loader-indicator" Type="@LoaderType.ConvergingSpinner" Size="@(ThemeConstants.Loader.Size.Large)"></TelerikLoader>
    </div>
}

@code {

    #region Fields

        private IEnumerable<ActivityDTO> _activityList = new List<ActivityDTO>();
        private int _pageSize = 10;
        private List<int?> _pageSizes => new List<int?> { 5, 10, 25, 50, null };
        private bool _deleteOperation = false;
        private string? _errorMessage = null;

    #endregion

    #region Constants
    
        private const string Height = "400px";

    #endregion

   

    #region Methods

    protected override async Task OnInitializedAsync()
    {
        await GetGridData();
    }

    private async Task GetGridData()
    {
        _activityList = await activityService.GetAll();
    }

    private async Task ConfirmDelete(MouseEventArgs e, string code)
    {
        // modify the function to display modal window
        await jsRuntime.InvokeVoidAsync("DisplayModal", "DeleteModal_" + code);
    }

    private async Task DeleteActivity(string code)
    {
        try
        {
            _deleteOperation = false;
            // Perform delete activity
            await activityService.Delete(code);
            await GetGridData();
            _deleteOperation = true;
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _deleteOperation = false;
            _errorMessage = ex.Message.ToString();
        }
    }

    #endregion
}

<style>
    .loader-size-title {
        display: block;
        margin-bottom: 10px;
    }

    .loader-container {
        text-align: center;
        width: 150px;
        display: inline-table;
        padding-top: 10px;
        position: absolute;
        left: 50%;
    }
</style>