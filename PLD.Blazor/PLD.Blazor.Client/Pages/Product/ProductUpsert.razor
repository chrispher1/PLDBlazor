@page "/product/productUpdate/{Id:int}"
@page "/product/productInsert"

@using PLD.Blazor.Common;
@using Microsoft.AspNetCore.Authorization;

@attribute [Authorize(Policy = ConstantClass.MaintenanceRolePolicy)]

@inject IProductService productService
@inject ICarrierService carrierService
@inject IProductTypeService productTypeService

@if (@Id == 0)
{
    <h3>New Product</h3>
}
else
{
    <h3>Update Product</h3>
}

@if (_saveOperation == true)
{
    <span>Product successfully saved</span>
    <br/>
}

<div class="container border mt-2 p-4">

    @if (_product != null)
    {
        <EditForm Model="@_product" OnValidSubmit="UpsertProduct">
            <DataAnnotationsValidator />
            <CustomFormValidator @ref="_customFormValidator" />
            <div class="row mb-3">
                <div class="col">
                <ValidationSummary />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_product.Carrier.Name)" class="col-2 col-form-label text-end">Carrier</label>
                <div class="col-2">
                    <InputSelect @bind-Value="_product.CarrierId" class="form-select">
                            <option value="0" disabled="disabled" selected>--Select Carrier--</option> 
                            @foreach( var carrier in _carrierList)
                            {
                                <option value="@carrier.Id" >@carrier.Name</option>                         
                            }
                        </InputSelect>                   
                </div>                
                <label for="@nameof(_product.ProductType.Name)" class="col-5 col-form-label text-end">Product Type</label>
                <div class="col-3">
                    <InputSelect @bind-Value="_product.ProductTypeId" class="form-select">
                        <option value="0" disabled="disabled" selected>--Select Product Type--</option> 
                        @foreach( var productType in _productTypeList)
                        {
                            <option value="@productType.Id">@productType.Name</option>                         
                        }
                    </InputSelect>
                </div>
            </div>            
            <div class="row mb-3">
                <label for="@nameof(_product.Code)" class="col-2 col-fom-label text-end">Code</label>
                <div class="col-2">
                    <input type="text" @bind-value="_product.Code" class="form-control" />                    
                </div>
                <label for="@nameof(_product.Name)" class="col-5 col-form-label text-end">Name</label>
                <div class="col-3">
                    <input type="text" @bind-value="_product.Name"  class="form-control"/>
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_product.SalesLinkCarrierId)" class="col-2 col-fom-label text-end">SalesLink Carrier ID</label>
                <div class="col-2">
                    <input type="text" @bind-value="_product.SalesLinkCarrierId" class="form-control" />                    
                </div>
            </div>            
            <div class="row mb-3">
                <label for="@nameof(_product.Code)" class="col-2 form-check-label text-end">Rate Indicator</label>
                <div class="col-2">
                    <input type="checkbox" @bind-value="_product.ProductRateIndicator" checked="@(_product.ProductRateIndicator?"checked":null)"  class="form-check-input" />                    
                </div>
                <label for="@nameof(_product.Name)" class="col-5 form-check-label text-end">Type Rate Indicator</label>
                <div class="col-3">
                    <input type="checkbox" @bind-value="_product.ProductTypeRateIndicator"  
                    checked="@(_product.ProductTypeRateIndicator?"checked":null)"
                    class="form-check-input"/>
                </div>
            </div> 
            <div class="row mb-3">
                <div class="offset-4 col-8">
                    <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy" Context="authorizedContext">
                        <Authorized>
                            <button class="btn btn-primary">Save</button>
                        </Authorized>
                        <NotAuthorized>
                            <button class="btn btn-primary" disabled>Save</button>
                        </NotAuthorized>
                    </AuthorizeView>   
                    <NavLink class="btn btn-secondary" href="product">Back</NavLink>
                </div>
            </div>
        </EditForm>
    }
</div>

@code {

    #region Parameters

        [Parameter]
        public int Id { get; set; }

    #endregion Parameters

    #region Fields

        private ProductDTO? _product;
        private IEnumerable<CarrierDTO> _carrierList = new List<CarrierDTO>();
        private IEnumerable<ProductTypeDTO> _productTypeList = new List<ProductTypeDTO>();
        private bool _saveOperation = false;
        private CustomFormValidator? _customFormValidator;

    #endregion Fields

    #region Events

        protected override async Task OnInitializedAsync()
        {
            await PopulateForm();

            if (@Id == 0)
            {
                _product = new ProductDTO();
            }
            else
            {
                // Populate carrier if already exists
                _product = await productService.GetById(Id);
            }
        }

    #endregion Events
    
    #region Methods

    private async Task PopulateForm()
    {
        _carrierList = await carrierService.GetAll();
        _productTypeList = await productTypeService.GetAll();
    }

    private async Task UpsertProduct()
    {
        _customFormValidator?.ClearFormErrors();
        var errors = new Dictionary<string, List<string>>();
        try
        {
            _saveOperation = false;
            if (_product?.Id == 0)
            {
                var record = await productService.GetByCode(_product.Code);
                if (record != null)
                {

                    errors.Add(nameof(_product.Code),
                    new() { ConstantClass.ProductCannotAddRecordCodeUsed });
                    _customFormValidator?.DisplayFormErrors(errors);
                }
                else
                {
                    // Insert Procedure.
                    if (_product.Id == 0)
                    {
                        _product.CreatedBy = ConstantClass.SystemUser;
                        _product.CreatedDate = System.DateTime.Now;                        
                        _product = await productService.Create(_product);
                    }
                    _saveOperation = true;
                }
            }
            else
            {
                var record = await productService.GetByCodeAndNotID( _product?.Code == null ? String.Empty : _product.Code
                    , _product?.Id == null ? 0 : _product.Id);

                if (record != null && record.Any())
                {
                    errors.Add(nameof(_product.Code),
                    new() { ConstantClass.ProductCannotAddRecordCodeUsed });
                    _customFormValidator?.DisplayFormErrors(errors);
                }
                else
                {
                    // Update the record
                    (_product ??= new ProductDTO()).ModifiedBy = ConstantClass.SystemUser;
                    _product.ModifiedDate = System.DateTime.Now;
                    await productService.Update(_product);
                    _saveOperation = true;
                }
            }
        }
        catch (Exception ex)
        {
            errors.Add(nameof(_product.Code),
                    new() { ex.Message });
            _customFormValidator?.DisplayFormErrors(errors);
            _saveOperation = false;
        }
    }

    #endregion Methods
}
