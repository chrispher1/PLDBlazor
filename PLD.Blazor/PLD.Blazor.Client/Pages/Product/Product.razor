@page "/product"

@using Telerik.DataSource.Extensions;
@using Microsoft.AspNetCore.Authorization;

@attribute [Authorize(Policy = ConstantClass.MaintenanceRolePolicy)]

@inject IProductService productService
@inject IJSRuntime jsRuntime

<h3>Product</h3>

@if (_deleteOperation == true)
{
    <span>Product successfully deleted</span>
    <br/>
}

@if(_errorMessage != null)
{
    <span>@_errorMessage</span>
    <br/>
    <br/>
}

@if (_productList != null)
{
    <TelerikGrid Data=@_productList
             Sortable=true
             Pageable=true
             @bind-PageSize="@_pageSize"
             FilterMode="@GridFilterMode.FilterRow"
             Height=@Height>
        <GridSettings>
            <GridPagerSettings PageSizes="@_pageSizes" />
        </GridSettings>
        <GridColumns>
            <GridColumn Field="@nameof(ProductDTO.Id)" Title="Id" Visible=false>
                <Template><input type="hidden" asp-for="@nameof(ProductDTO.Id)"> </Template>
            </GridColumn>
            <GridColumn Field="Carrier.Name" Title="Carrier" Width="150px">
                <Template>
                    @{
                        ProductDTO? record = (context as ProductDTO);
                        @(String.Concat(record?.Carrier?.Name, " (", record?.Carrier?.CarrierCode, ")").ToString());
                    }
                </Template>
                </GridColumn>
            <GridColumn Field="ProductType.Name" Title="Product Type" Width="150px" />
            <GridColumn Field="@nameof(ProductDTO.Name)" Title="Product" Width="300px" >
                <Template>
                    @{
                        ProductDTO? record = (context as ProductDTO);
                        @(String.Concat(record?.Name, " (", record?.Code, ")").ToString());
                    }
                </Template>
                </GridColumn>
            <GridColumn Field="@nameof(ProductDTO.SalesLinkCarrierId)" Width="100px">
                <HeaderTemplate>
                    SalesLink<br/>CarrierID
                </HeaderTemplate>
                </GridColumn>
            <GridColumn Field="@nameof(ProductDTO.ProductRateIndicator)" Width="100px" >
                <HeaderTemplate>
                    Rate<br/>Indicator
                </HeaderTemplate>
                </GridColumn>
            <GridColumn Field="@nameof(ProductDTO.ProductTypeRateIndicator)" Width="100px" >
                <HeaderTemplate>
                    Type Rate<br/>Indicator
                </HeaderTemplate>
                </GridColumn>
            <GridCommandColumn Width="150px" Context="productContext">
                <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy">
                    <Authorized>
                        @{
                            ProductDTO? record = (productContext as ProductDTO);
                            <NavLink class="btn btn-primary" href="@($"product/productUpdate/{record?.Id}")">Edit</NavLink>
                            <NavLink class="btn btn-secondary" @onclick=" (args) => ConfirmDelete(args, record?.Id == null ? 0 : record.Id)">Delete</NavLink>

                            <DeleteModal ModalTitle="Product" BodyText="Are you sure you want to delete this product ?"
                                PrimaryButtonText="Delete" SecondaryButtonText="Cancel" Id=@(record?.Id == null ? 0 : record.Id)
                                SelectedMethod="DeleteProduct">
                            </DeleteModal>
                        }
                    </Authorized>
                </AuthorizeView>
                
        </GridCommandColumn>
    </GridColumns>
    <GridToolBarTemplate>
        <div class="col d-flex justify-content-end">
            <div>
                <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy">
                    <Authorized>
                        <NavLink class="btn btn-primary" href="product/productInsert">New</NavLink>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    </GridToolBarTemplate>
</TelerikGrid>
}
else
{
    <div class="loader-container">
        <span class="loader-size-title">Fetching data</span>
        <TelerikLoader Class="loader-indicator" Type="@LoaderType.ConvergingSpinner" Size="@(ThemeConstants.Loader.Size.Large)"></TelerikLoader>
    </div>
}

@code {
    
    #region Fields

        private IEnumerable<ProductDTO>? _productList;
        private int _pageSize = 10;        
        private List<int?> _pageSizes => new List<int?> { 5, 10, 25, 50, null };
        private bool _deleteOperation = false;
        private string? _errorMessage = null; 

    #endregion Fields

    #region Constants
    
        private const string Height = "400px";

    #endregion Constants
    
    #region Events

        protected override async Task OnInitializedAsync()
        {
            await GetGridData();
        }

    #endregion Events

    #region Methods    

    private async Task GetGridData()
    {
        _productList = await productService.GetAll();
    }

    private async Task ConfirmDelete(MouseEventArgs e, int id)
    {
        // modify the function to display modal window
        await jsRuntime.InvokeVoidAsync("DisplayModal", "DeleteModal_" + id.ToString());
    }

    private async Task DeleteProduct(int id)
    {
        try
        {
            _deleteOperation = false;
            // Perform delete product
            await productService.Delete(id);
            await GetGridData();
            _deleteOperation = true;
            _errorMessage = null;

        }
        catch (Exception ex)
        {
            _deleteOperation = false;
            _errorMessage = ex.Message.ToString();
        }
    }

    #endregion Methods
}

<style>
    .loader-size-title {
        display: block;
        margin-bottom: 10px;
    }

    .loader-container {
        text-align: center;
        width: 150px;
        display: inline-table;
        padding-top: 10px;
        position: absolute;
        left: 50%;
    }
</style>
