@page "/productType/productTypeUpdate/{Id:int}"
@page "/productType/productTypeInsert"
@using PLD.Blazor.Common;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Policy = ConstantClass.MaintenanceRolePolicy)]
@inject IProductTypeService productTypeService


@if (@Id == 0)
{
    <h3>New Product Type</h3>
}
else
{
    <h3>Update Product Type</h3>
}

@if (SaveOperation == true)
{
    <span>Product Type successfully saved</span>
    <br/>
}

<div class="container border mt-2 p-4">

    @if (_productType != null)
    {
        <EditForm Model="@_productType" OnValidSubmit="UpsertProductType">
            <DataAnnotationsValidator />
            <CustomFormValidator @ref="_customFormValidator" />
            <div class="row mb-3">
                <label for="@nameof(_productType.Code)" class="col-4 text-end">Code</label>
                <div class="col-8">
                    <input type="text" @bind-value="_productType.Code" />
                    <ValidationMessage For=" ()=> _productType.Code "></ValidationMessage>
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_productType.Name)" class="col-4 text-end">Name</label>
                <div class="col-8">
                    <input type="text" @bind-value="_productType.Name" />
                    <ValidationMessage For=" ()=> _productType.Name" />
                </div>
            </div>

            <div class="row mb-3">
                <div class="offset-4 col-8">
                    <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy" Context="authorizedContext">
                        <Authorized>
                            <button class="btn btn-primary">Save</button>
                        </Authorized>
                        <NotAuthorized>
                            <button class="btn btn-primary" disabled>Save</button>
                        </NotAuthorized>
                    </AuthorizeView>                       
                    <NavLink class="btn btn-secondary" href="productType">Back</NavLink>
                </div>
            </div>
        </EditForm>
    }
</div>

@code {

    #region Parameters

        [Parameter]
        public int Id { get; set; }

    #endregion

    #region Fields

        private ProductTypeDTO? _productType;
        private bool SaveOperation = false;
        private CustomFormValidator? _customFormValidator;

    #endregion
    
    #region Methods

        protected override async Task OnInitializedAsync()
        {
            if (@Id == 0)
            {
                _productType = new ProductTypeDTO();
            }
            else
            {
                // Populate carrier if already exists
                _productType = await productTypeService.GetById(Id);
            }
        }

        private async Task UpsertProductType()
        {
            _customFormValidator?.ClearFormErrors();
            var errors = new Dictionary<string, List<string>>();
            try
            {
                SaveOperation = false;
                if (_productType?.Id == 0)
                {
                    var record = await productTypeService.GetByCode(_productType.Code);
                    if (record != null)
                    {

                        errors.Add(nameof(_productType.Code),
                        new() { ConstantClass.ProductTypeCannotAddRecordCodeUsed });
                        _customFormValidator?.DisplayFormErrors(errors);
                    }
                    else
                    {
                        // Insert Procedure.
                        if (_productType.Id == 0)
                        {
                            _productType.CreatedBy = ConstantClass.SystemUser;
                            _productType.CreatedDate = System.DateTime.Now;
                            _productType = await productTypeService.Create(_productType);
                        }
                        SaveOperation = true;
                    }
                }
                else
                {
                    var record = await productTypeService.GetByCodeAndNotID(_productType?.Code == null ? String.Empty : _productType.Code,
                        _productType?.Id == null ? 0 : _productType.Id);
                    if (record != null && record.Any())
                    {
                        errors.Add(nameof(_productType.Code),
                        new() { ConstantClass.ProductTypeCannotAddRecordCodeUsed });
                        _customFormValidator?.DisplayFormErrors(errors);
                    }
                    else
                    {
                        // Update the record
                        (_productType = _productType ?? new ProductTypeDTO()).ModifiedBy = ConstantClass.SystemUser;
                        _productType.ModifiedDate = System.DateTime.Now;
                        await productTypeService.Update(_productType);
                        SaveOperation = true;
                    }
                }
            }
            catch (Exception ex)
            {
                errors.Add(nameof(_productType.Code),
                        new() { ex.Message });
                _customFormValidator?.DisplayFormErrors(errors);
                SaveOperation = false;
            }
        }

    #endregion
    
    

}
