@page "/register/registerUpdate/{Id:int}"
@page "/register"

@using PLD.Blazor.Common

@inject IUserService userService
@inject IRoleService roleService
@inject NavigationManager navigationManager

@if (@Id == 0)
{
    <h3>Register</h3>
}

@if (_saveOperation == true)
{
    <span>User successfully register</span>
    <br/>
}

<div class="container border mt-2 p-4">

    @if (_userForRegister != null)
    {
        <EditForm Model="@_userForRegister" OnValidSubmit="InsertUserForRegister">
            <DataAnnotationsValidator />
            <CustomFormValidator @ref="_customFormValidator" />

            <div class="row mb-3 mt-3">
                <div  class="offset-4 col-auto ps-0">
                <ValidationSummary />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_userForRegister.UserName)" class="offset-3 col-2 col-form-label text-end">User Name</label>
                <div class="col-auto">    
                   <InputText type="text" @bind-Value="_userForRegister.UserName" class="form-control" />
                </div>
            </div>
            
            <div class="row mb-3">
                <label for="@nameof(_userForRegister.Password)" class="offset-3 col-2 col-fom-label text-end">Password</label>
                <div class="col-auto">
                   <InputText type="password" @bind-Value="_userForRegister.Password" class="form-control" />                       
                </div>
            </div>          

            <div class="row mb-3">
                <label for="@nameof(_userForRegister.ConfirmPassword)" class="offset-3 col-2 col-fom-label text-end">Confirm Password</label>
                <div class="col-auto">
                   <InputText type="password" @bind-Value="_userForRegister.ConfirmPassword" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_userForRegister.FirstName)" class="offset-3 col-2 col-fom-label text-end">First Name</label>
                <div class="col-auto">
                   <InputText type="text" @bind-Value="_userForRegister.FirstName" class="form-control" />               
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_userForRegister.LastName)" class="offset-3 col-2 col-fom-label text-end">Last Name</label>
                <div class="col-auto">
                   <InputText type="text" @bind-Value="_userForRegister.LastName" class="form-control" />                 
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_userForRegister.BirthDate)" class="offset-3 col-2 col-fom-label text-end">Birth Date</label>
                <div class="col-auto">                    
                    <InputDate @bind-Value="_userForRegister.BirthDate" class="form-control" />             
                </div>
            </div>
            <div class="row mb-3">
                <div class="offset-5 col-7">
                    <button class="btn btn-primary">Save</button>
                    <NavLink class="btn btn-secondary" href="">Cancel</NavLink>
                </div>
            </div>
        </EditForm>
    }
</div>

@code {

    #region Parameters

        [Parameter]
        public int Id { get; set; }

    #endregion Parameters
    
    #region Fields

        private UserForRegisterDTO? _userForRegister;
        private CustomFormValidator? _customFormValidator;
        private bool _saveOperation = false;

    #endregion Fields

    #region Events

        protected override void OnInitialized()
        {
            if (@Id == 0)
            {
                _userForRegister = new UserForRegisterDTO();
                _userForRegister.BirthDate = System.DateTime.Now;
            }
        }

    #endregion Events
    
    #region Methods

        private async Task InsertUserForRegister()
        {
            _customFormValidator?.ClearFormErrors();
            var errors = new Dictionary<string, List<string>>();
            try
            {
                _saveOperation = false;
                var record = await userService.GetByUserName(_userForRegister?.UserName == null ? String.Empty : _userForRegister.UserName);
                if (record != null)
                {

                    errors.Add(nameof(_userForRegister.UserName),
                    new() { ConstantClass.UserCannotAddRecordUserNameUsed });
                    _customFormValidator?.DisplayFormErrors(errors);
                }
                else
                {
                    // Insert Procedure.
                    (_userForRegister ??= new UserForRegisterDTO()).CreatedBy = ConstantClass.SystemUser;
                    _userForRegister.CreatedDate = System.DateTime.Now;
                    // Add default role
                    _userForRegister.UserRoles = new List<UserRoleDTO>();

                    UserRoleDTO objUserRoleCommmissionUserRead = new UserRoleDTO();
                    objUserRoleCommmissionUserRead.CreatedDate = System.DateTime.Now;
                    objUserRoleCommmissionUserRead.CreatedBy = ConstantClass.SystemUser;
                    objUserRoleCommmissionUserRead.RoleId = (await roleService.GetByName(ConstantClass.Role_Commission_User_Read) ?? new RoleDTO()).Id;
                    _userForRegister.UserRoles.Add(objUserRoleCommmissionUserRead);

                    UserRoleDTO objUserRoleCaseUserRead = new UserRoleDTO();
                    objUserRoleCaseUserRead.CreatedDate = System.DateTime.Now;
                    objUserRoleCaseUserRead.CreatedBy = ConstantClass.SystemUser;
                    objUserRoleCaseUserRead.RoleId = (await roleService.GetByName(ConstantClass.Role_Case_User_Read) ?? new RoleDTO()).Id;
                    _userForRegister.UserRoles.Add(objUserRoleCaseUserRead);
                    await userService.Register(_userForRegister);

                    _saveOperation = true;
                    navigationManager.NavigateTo("registerSuccess");
                }
            }
            catch (Exception ex)
            {
                errors.Add(nameof(_userForRegister.UserName),
                        new() { ex.Message });
                _customFormValidator?.DisplayFormErrors(errors);
                _saveOperation = false;
            }
        }

    #endregion Methods
    
}
