@page "/user"
@using Telerik.DataSource.Extensions;
@using Telerik.DataSource;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Policy = ConstantClass.MaintenanceRolePolicy)]
@inject IUserService userService
@inject IJSRuntime jsRuntime

<h3>User</h3>

@if (_deleteOperation == true)
{
    <span>User successfully deleted</span>
    <br/>
}

@if(_errorMessage != null)
{
    <span>@_errorMessage</span>
    <br/>
    <br/>
}

@if (_userList != null)
{
    <TelerikGrid Data=@_userList
             Sortable=true
             Pageable=true
             @bind-PageSize="@_pageSize"
             FilterMode="@GridFilterMode.FilterRow"
             Height=@Height>

        <GridSettings>
            <GridPagerSettings PageSizes="@_pageSizes" />
        </GridSettings>
        <GridColumns>
            <GridColumn Field="@nameof(UserDTO.Id)" Title="Id" Visible=false>
                <Template><input type="hidden" asp-for="@nameof(UserDTO.Id)"> </Template>
            </GridColumn>
            <GridColumn Field="FirstName" Title="First Name" Width="150px" />
            <GridColumn Field="LastName" Title="Last Name" Width="150px" />
            <GridColumn Field="UserName" Title="User Name" Width="150px" />
            <GridColumn Field="BirthDate" Title="Birthday" Width="150px">
                <Template>
                    @((context as UserDTO)?.BirthDate.ToString("MM/dd/yyyy"))
                </Template>
                </GridColumn>
            <GridColumn Field="LastLoginDate" Title="Last Login Date" Width="150px" DefaultFilterOperator="FilterOperator.IsGreaterThanOrEqualTo" />
            <GridCommandColumn Width="150px" Context="userContext">
                <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy">
                    <Authorized>
                        @{
                            UserDTO? record = (userContext as UserDTO);
                            <NavLink class="btn btn-primary" href="@($"user/userUpdate/{record?.Id}")">Edit</NavLink>
                            <NavLink class="btn btn-secondary" @onclick=" args => ConfirmDelete(args, record?.Id ==null ? 0:record.Id)">Delete</NavLink>

                            <DeleteModal ModalTitle="User" BodyText="Are you sure you want to delete this user ?"
                                PrimaryButtonText="Delete" SecondaryButtonText="Cancel" Id=@(record?.Id ==null ? 0:record.Id)
                                SelectedMethod="DeleteUser">
                            </DeleteModal>
                        }
                    </Authorized>
                </AuthorizeView>                
        </GridCommandColumn>
    </GridColumns>
    <GridToolBar>
        <div class="col d-flex justify-content-end">
            <div>
                <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy">
                    <Authorized>
                        <NavLink class="btn btn-primary" href="user/userInsert">New</NavLink>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    </GridToolBar>
</TelerikGrid>
}
else
{
    <div class="loader-container">
        <span class="loader-size-title">Fetching data</span>
        <TelerikLoader Class="loader-indicator" Type="@LoaderType.ConvergingSpinner" Size="@(ThemeConstants.Loader.Size.Large)"></TelerikLoader>
    </div>
}

@code {

    #region Fields

        private bool _deleteOperation = false;
        private string? _errorMessage = null;
        private IEnumerable<UserDTO>? _userList; 
        private int _pageSize = 10;
        private List<int?> _pageSizes => new List<int?> { 5, 10, 25, 50, null };

    #endregion

    #region Constants
        
        private const string Height = "400px";

    #endregion

    #region Methods
    
        protected override async Task OnInitializedAsync()
        {
            await GetGridData();
        }

        private async Task GetGridData()
        {
            _userList = await userService.GetAll();
        }

        private async Task ConfirmDelete(MouseEventArgs e, int id)
        {
            // modify the function to display modal window
            await jsRuntime.InvokeVoidAsync("DisplayModal", "DeleteModal_"+ id.ToString());
        }

        private async Task DeleteUser (int id)
        {
            try
            {
                _deleteOperation = false;
                // Perform delete user
                await userService.Delete(id);            
                await GetGridData();
                _deleteOperation = true;
                _errorMessage = null;
            }
            catch (Exception ex)
            {   
                _deleteOperation = false;
                _errorMessage = ex.Message.ToString();   
            }
        }

    #endregion
}

<style>
    .loader-size-title {
        display: block;
        margin-bottom: 10px;
    }

    .loader-container {
        text-align: center;
        width: 150px;
        display: inline-table;
        padding-top: 10px;
        position: absolute;
        left: 50%;
    }
</style>
