@page "/user/userUpdate/{Id:int}"
@page "/user/userInsert"
@using PLD.Blazor.Common;
@using Microsoft.AspNetCore.Authorization;
@using System;
@attribute [Authorize(Policy = ConstantClass.MaintenanceRolePolicy)]

@inject IUserService userService
@inject IRoleService roleService


@if (@Id == 0)
{
    <h3>New User</h3>
}
else
{
    <h3>Update User</h3>
}

@if (_saveOperation == true)
{
    <span>User successfully saved</span>
    <br />
}

<div class="container border mt-2 p-4">

    @if (_user != null)
    {
        <EditForm Model="@_user" OnValidSubmit="UpsertUser">
            <DataAnnotationsValidator />
            <CustomFormValidator @ref="_customFormValidator" />

            <div class="row mb-3">
                <div class="col">
                    <ValidationSummary />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_user.FirstName)" class="col-2 col-form-label text-end">First Name</label>
                <div class="col-2">
                    <input type="text" @bind-value="_user.FirstName" class="form-control" />
                </div>

                <label for="@nameof(_user.LastName)" class="col-5 col-form-label text-end">Last Name</label>
                <div class="col-3">
                    <input type="text" @bind-value="_user.LastName" class="form-control" />
                </div>
            </div>

            <div class="row mb-4">
                <label for="@nameof(_user.BirthDate)" class="col-2 col-fom-label text-end">Birth Date</label>
                <div class="col-2">
                    <InputDate @bind-Value="_user.BirthDate" class="form-control" />
                </div>
                <label for="@nameof(_user.UserName)" class="col-5 col-form-label text-end">User Name</label>
                <div class="col-3">
                    <input type="text" @bind-value="_user.UserName" class="form-control" />
                </div>
            </div>

            <div class="row mb-4">
                <div class=" offset-1 col-11"> <b>Roles</b> </div>
            </div>

            @if (_roleList != null)
            {
                int i = 1, j = 0;
                @foreach (RoleDTO role in _roleList)
                {
                    @if (i % 3 == 0)
                    {
                        <div class="row mb-3">
                            @for (j = i - 3; j < i; j++)
                            {
                                RoleDTO currentRole = _roleList.ToList()[j];
                                <div class="offset-1 col-3">
                                    @{
                                        if ((_userRoleList != null) && (_userRoleList.Any(u => u.RoleId == currentRole.Id)))
                                        {
                                            <input type="checkbox" class="form-check-input" @onchange=" args => CheckboxClicked(currentRole.Id, args)" checked />
                                        }
                                        else
                                        {
                                            <input type="checkbox" class="form-check-input" @onchange=" args => CheckboxClicked(currentRole.Id, args)" />
                                        }
                                    }
                                    <label for="@nameof(currentRole.Name)" class="ms-1 form-check-label">@currentRole.Name</label>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        if (i >= _roleList.Count())
                        {
                            <div class="row mb-5">
                                @{
                                    int diff = i - j;
                                }

                                @for (int k = i - diff; k < i; k++)
                                {
                                    RoleDTO currentRole = _roleList.ToList()[k];
                                    <div class="offset-1 col-3">
                                        @{
                                            if ((_userRoleList != null) && (_userRoleList.Any(u => u.RoleId == currentRole.Id)))
                                            {
                                                <input type="checkbox" @onchange=" args => CheckboxClicked(currentRole.Id, args)" class="form-check-input" checked />
                                            }
                                            else
                                            {
                                                <input type="checkbox" class="form-check-input" @onchange=" args => CheckboxClicked(currentRole.Id, args)" />
                                            }
                                        }
                                        <label for="@nameof(currentRole.Name)" class="ms-1 form-check-label">@currentRole.Name</label>
                                    </div>
                                }
                            </div>
                        }
                    }
                    i++;
                }
            }
            <div class="row mb-3">
                <div class="d-flex justify-content-center">
                    <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy" Context="authorizedContext">
                        <Authorized>
                            <button class="btn btn-primary me-1">Save</button><NavLink class="btn btn-secondary" href="user">Back</NavLink>
                        </Authorized>
                        <NotAuthorized>
                            <button class="btn btn-primary me-1" disabled>Save</button><NavLink class="btn btn-secondary" href="user">Back</NavLink>
                        </NotAuthorized>
                    </AuthorizeView>
                </div>
            </div>
            @if (_processingIndicator)
            {
                <div class="row">
                    <div class="d-flex justify-content-center"><span class="loader-size-title">Processing. Please wait.</span> </div>
                </div>
                <div class="row mb-3">
                    <div class="d-flex justify-content-center">
                        <div class="loader-container">
                            <TelerikLoader Class="loader-indicator" Type="@LoaderType.ConvergingSpinner" Size="@(ThemeConstants.Loader.Size.Large)"></TelerikLoader>
                        </div>
                    </div>
                </div>
            }

        </EditForm>
    }


</div>

@code {

    #region Parameters

    [Parameter]
    public int Id { get; set; }

    #endregion

    #region Fields

        private bool _saveOperation = false;
        private UserDTO? _user;
        private CustomFormValidator? _customFormValidator;
        private IEnumerable<RoleDTO> _roleList = new List<RoleDTO>();
        private ICollection<UserRoleDTO> _userRoleList = new List<UserRoleDTO>();
        private ICollection<int> _selectedRoleList { get; set; } = new List<int>();
        private bool _processingIndicator = false;

    #endregion


    #region Methods
    
        protected override async Task OnInitializedAsync()
        {
            //await PopulateForm();

            if (@Id == 0)
            {
                _user = new UserDTO();
            }
            else
            {
                // Populate carrier if already exists
                _user = await userService.GetById(Id);
            }

            _userRoleList = _user?.UserRoles ?? new List<UserRoleDTO>();
            PopulateSelectedRoleList();
            _roleList = await roleService.GetAll();
        }

        private void PopulateSelectedRoleList()
        {
            foreach (UserRoleDTO objUserRoleDTO in _userRoleList)
            {
                _selectedRoleList.Add(objUserRoleDTO.RoleId);
            }

        }

        private void CheckboxClicked(int selectedRole, EventArgs arg)
        {
            if (((ChangeEventArgs)arg as ChangeEventArgs).Value is true)
            {

                _selectedRoleList.Add(selectedRole);
            }
            else
            {
                _selectedRoleList.Remove(selectedRole);
            }
        }

        private async Task UpsertUser()
        {
            _customFormValidator?.ClearFormErrors();

            var errors = new Dictionary<string, List<string>>();

            try
            {
                _saveOperation = false;
                _processingIndicator = true;
                if (_user?.Id == 0)
                {
                    var record = await userService.GetByUserName(_user.UserName);

                    if (record != null)
                    {

                        errors.Add(nameof(_user.UserName),
                        new() { ConstantClass.UserCannotAddRecordUserNameUsed });
                        _customFormValidator?.DisplayFormErrors(errors);
                    }
                    else
                    {
                        // Insert Procedure.
                        if (_user.Id == 0)
                        {
                            _user.CreatedBy = ConstantClass.SystemUser;
                            _user.CreatedDate = System.DateTime.Now;

                            // Add role of the user
                            _user.UserRoles = new List<UserRoleDTO>();

                            foreach (int roleId in _selectedRoleList)
                            {
                                UserRoleDTO objUserRole = new UserRoleDTO();
                                objUserRole.CreatedDate = System.DateTime.Now;
                                objUserRole.CreatedBy = ConstantClass.SystemUser;
                                objUserRole.RoleId = roleId;
                                _user.UserRoles.Add(objUserRole);
                            }
                            _user = await userService.Create(_user);
                            _userRoleList = _user?.UserRoles ?? new List<UserRoleDTO>();
                        }
                        _saveOperation = true;
                        await Task.Delay(5000);
                        _processingIndicator = false;
                    }
                }
                else
                {
                    var record = await userService.GetByUserNameAndNotID(
                        _user?.UserName == null ? String.Empty:_user.UserName, 
                        _user?.Id == null ? 0:_user.Id
                    );
                    if (record != null && record.Any())
                    {
                        errors.Add(nameof(_user.UserName),
                        new() { ConstantClass.UserCannotAddRecordUserNameUsed });
                        _customFormValidator?.DisplayFormErrors(errors);
                    }
                    else
                    {
                        // Update the record
                        (_user = _user ?? new UserDTO()).ModifiedBy = ConstantClass.SystemUser;
                        _user.ModifiedDate = System.DateTime.Now;
                    foreach (UserRoleDTO objUserRole in (_user.UserRoles = _user.UserRoles ?? new List<UserRoleDTO>()).ToList())
                        {
                            // Delete the role of the user that is not checked
                            if (!_selectedRoleList.Where(role => role == objUserRole.RoleId).Any())
                            {
                                _user.UserRoles.Remove(objUserRole);
                            }
                        }

                        foreach (int roleId in _selectedRoleList)
                        {
                            // Add the new role of the user when it is not existing
                            if (_user.UserRoles.Where(role => role.RoleId == roleId).Count() == 0)
                            {
                                UserRoleDTO objUserRole = new UserRoleDTO();
                                objUserRole.CreatedDate = System.DateTime.Now;
                                objUserRole.CreatedBy = ConstantClass.SystemUser;
                                objUserRole.RoleId = roleId;
                                _user.UserRoles.Add(objUserRole);
                            }
                        }
                        await userService.Update(_user);
                        _saveOperation = true;
                        await Task.Delay(5000);
                        _processingIndicator = false;

                    }
                }
            }
            catch (Exception ex)
            {
                errors.Add(nameof(_user.UserName),
                        new() { ex.Message });
                _customFormValidator?.DisplayFormErrors(errors);
                _saveOperation = false;
                _processingIndicator = false;

            }
        }

    #endregion
}

<style>
    .loader-size-title {
        /*display: block;
            margin-bottom: 10px;
            */
    }

    .loader-container {
        text-align: center;
        width: 150px;
        /*display: inline-table;
            padding-top: 10px;
            position: absolute;
            left: 50%;*/
    }
</style>
