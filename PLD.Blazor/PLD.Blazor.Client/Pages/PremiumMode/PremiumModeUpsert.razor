@page "/_premiumMode/_premiumModeInsert/{Action}"
@page "/_premiumMode/_premiumModeUpdate/{Action}/{Code}"
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Policy = ConstantClass.MaintenanceRolePolicy)]
@inject IPremiumModeService premiumModeService

@if (Action == ConstantClass.AddAction)
{
    <h3>New Premium Mode</h3>
}
else if (Action == ConstantClass.EditAction)
{
    <h3>Update Premium Mode</h3>
}

@if (_saveOperation == true)
{
    <span>Premium Mode successfully saved</span>
    <br />
}

<div class="container border mt-2 p-4">
    @if(_premiumMode != null)
    {
        <EditForm Model="@_premiumMode" OnValidSubmit="Upsert_premiumMode">
            <DataAnnotationsValidator/>
            <CustomFormValidator @ref="_customFormValidator" />
            <div class="row mb-3">
                <div class="col">
                    <ValidationSummary />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(PremiumModeDTO.Code)" class="col-2 col-form-label text-end">Code</label>
                <div class="col-3">
                    <input type="text" @bind="_premiumMode.Code" class="form-control" />
                </div>
                <label for="@nameof(PremiumModeDTO.Description)" class="col-4 col-form-label text-end">Description</label>
                <div class="col-3">
                    <input type="text" @bind="_premiumMode.Description" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="offset-5 col-7">
                    <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy" Context="authorizedContext">
                        <Authorized>
                            <button class="btn btn-primary">Save</button>
                        </Authorized>
                        <NotAuthorized>
                            <button class="btn btn-primary" disabled>Save</button>
                        </NotAuthorized>
                    </AuthorizeView>
                    <NavLink class="btn btn-secondary" href="_premiumMode">Back</NavLink>
                </div>
            </div>
        </EditForm>
    }

</div>
@code {

    #region Parameters

        [Parameter]
        public string Code { get; set; } = String.Empty;
        [Parameter]
        public string Action { get; set; } = String.Empty;

    #endregion    

    #region Fields

        private PremiumModeDTO? _premiumMode;
        private bool _saveOperation = false;
        protected CustomFormValidator? _customFormValidator;

    #endregion

    #region Methods

        protected override async Task OnInitializedAsync()
        {

            if (String.IsNullOrEmpty(@Code))
            {
                _premiumMode = new PremiumModeDTO();
            }
            else
            {
                // Populate _premiumMode if already exists
                _premiumMode = await premiumModeService.GetByCode(Code);
            }

            await base.OnInitializedAsync();
        }

        private async Task Upsert_premiumMode()
        {
            _customFormValidator?.ClearFormErrors();
            var errors = new Dictionary<string, List<string>>();
            try
            {
                _saveOperation = false;
                var record = await premiumModeService.GetByCode(_premiumMode?.Code == null ? String.Empty : _premiumMode.Code);

                if (Action == ConstantClass.EditAction)
                {
                    if (record != null)
                    {
                        // Update the record
                        (_premiumMode = _premiumMode ?? new PremiumModeDTO()).ModifiedBy = ConstantClass.SystemUser;
                        _premiumMode.ModifiedDate = System.DateTime.Now;
                        await premiumModeService.Update(_premiumMode);
                        _saveOperation = true;
                    }
                    else
                    {
                        errors.Add(nameof(_premiumMode.Code),
                        new() { ConstantClass.ActivityCannotUpdateRecordCodeNotExists });
                        _customFormValidator?.DisplayFormErrors(errors);
                    }
                }
                else if (Action == ConstantClass.AddAction)
                {
                    if (record != null)
                    {
                        errors.Add(nameof(_premiumMode.Code),
                        new() { ConstantClass.ActivityCannotAddRecordCodeUsed });
                        _customFormValidator?.DisplayFormErrors(errors);
                    }
                    else
                    {
                        (_premiumMode = _premiumMode ?? new PremiumModeDTO()).CreatedBy = ConstantClass.SystemUser;
                        _premiumMode.CreatedDate = System.DateTime.Now;
                        _premiumMode = await premiumModeService.Create(_premiumMode);
                        _saveOperation = true;
                        Action = ConstantClass.EditAction;
                    }
                }
            }
            catch (Exception ex)
            {
                errors.Add(nameof(_premiumMode.Code),
                        new() { ex.Message });
                _customFormValidator?.DisplayFormErrors(errors);
                _saveOperation = false;
            }
        }

    #endregion    
}
