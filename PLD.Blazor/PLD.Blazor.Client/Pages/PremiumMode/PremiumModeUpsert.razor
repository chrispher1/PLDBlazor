@page "/premiummode/premiummodeInsert/{Action}"
@page "/premiummode/premiummodeUpdate/{Action}/{Code}"
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Policy = ConstantClass.MaintenanceRolePolicy)]
@inject IPremiumModeService premiumModeService

@if (Action == ConstantClass.AddAction)
{
    <h3>New Premium Mode</h3>
}
else if (Action == ConstantClass.EditAction)
{
    <h3>Update Premium Mode</h3>
}

@if (SaveOperation == true)
{
    <span>Premium Mode successfully saved</span>
    <br />
}

<div class="container border mt-2 p-4">
    @if(PremiumMode != null)
    {
        <EditForm Model="@PremiumMode" OnValidSubmit="UpsertPremiumMode">
            <DataAnnotationsValidator/>
            <CustomFormValidator @ref="customFormValidator" />
            <div class="row mb-3">
                <div class="col">
                    <ValidationSummary />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(PremiumModeDTO.Code)" class="col-2 col-form-label text-end">Code</label>
                <div class="col-3">
                    <input type="text" @bind="PremiumMode.Code" class="form-control" />
                </div>
                <label for="@nameof(PremiumModeDTO.Description)" class="col-4 col-form-label text-end">Description</label>
                <div class="col-3">
                    <input type="text" @bind="PremiumMode.Description" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="offset-5 col-7">
                    <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy" Context="authorizedContext">
                        <Authorized>
                            <button class="btn btn-primary">Save</button>
                        </Authorized>
                        <NotAuthorized>
                            <button class="btn btn-primary" disabled>Save</button>
                        </NotAuthorized>
                    </AuthorizeView>
                    <NavLink class="btn btn-secondary" href="premiummode">Back</NavLink>
                </div>
            </div>
        </EditForm>
    }

</div>
@code {

    [Parameter]
    public string Code { get; set; }
    [Parameter]
    public string Action { get; set; }

    private PremiumModeDTO PremiumMode { get; set; } = new PremiumModeDTO();
    private bool SaveOperation = false;
    protected CustomFormValidator customFormValidator;

    protected override async Task OnInitializedAsync()
    {
        
        if (String.IsNullOrEmpty(@Code))
        {
            PremiumMode = new PremiumModeDTO();
        }
        else
        {
            // Populate premiummode if already exists
            PremiumMode = await premiumModeService.GetByCode(Code);
        }

        await base.OnInitializedAsync();
    }

    private async Task UpsertPremiumMode()
    {
        customFormValidator.ClearFormErrors();
        var errors = new Dictionary<string, List<string>>();
        try
        {
            SaveOperation = false;
            var record = await premiumModeService.GetByCode(PremiumMode.Code);

            if (Action == ConstantClass.EditAction)
            {
                if (record != null)
                {
                    // Update the record
                    PremiumMode.ModifiedBy = ConstantClass.SystemUser;
                    PremiumMode.ModifiedDate = System.DateTime.Now;
                    await premiumModeService.Update(PremiumMode);
                    SaveOperation = true;
                }
                else
                {
                    errors.Add(nameof(PremiumMode.Code),
                    new() { ConstantClass.ActivityCannotUpdateRecordCodeNotExists });
                    customFormValidator.DisplayFormErrors(errors);
                }
            }
            else if (Action == ConstantClass.AddAction)
            {
                if (record != null)
                {
                    errors.Add(nameof(PremiumMode.Code),
                    new() { ConstantClass.ActivityCannotAddRecordCodeUsed });
                    customFormValidator.DisplayFormErrors(errors);
                }
                else
                {
                    PremiumMode.CreatedBy = ConstantClass.SystemUser;
                    PremiumMode.CreatedDate = System.DateTime.Now;
                    PremiumMode = await premiumModeService.Create(PremiumMode);
                    SaveOperation = true;
                    Action = ConstantClass.EditAction;
                }
            }
        }
        catch (Exception ex)
        {
            errors.Add(nameof(PremiumMode.Code),
                    new() { ex.Message });
            customFormValidator.DisplayFormErrors(errors);
            SaveOperation = false;
        }
    }
}
