@page "/timeactivitymapping"
@using Telerik.DataSource.Extensions;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Policy = ConstantClass.MaintenanceRolePolicy)]
@inject ITimeActivityMappingService timeActivityMappingService
@inject IJSRuntime jsRuntime

<h3>Time and Activity Mapping</h3>

@if (DeleteOperation == true)
{
    <span>Transaction Type successfully deleted</span>
    <br />
}

@if (ErrorMessage != null)
{
    <span>@ErrorMessage</span>
    <br />
    <br />
}

@if (TimeActivityMappingList != null)
{
    <TelerikGrid Data="@TimeActivityMappingList"
        Sortable=true
        Pageable=true
        @bind-PageSize="@PageSize"
        FilterMode="@GridFilterMode.FilterRow"
        Height="@Height"
        >
        <GridSettings>
            <GridPagerSettings PageSizes="@PageSizes"></GridPagerSettings>
        </GridSettings>
        <GridColumns>
            <GridColumn Field="Carrier.Name" Title="Carrier" Width="25px">
                <Template>
                    @{
                        TimeActivityMappingDTO? record = (context as TimeActivityMappingDTO);
                        @(String.Concat(record.Carrier?.Name, " (", record.Carrier?.CarrierCode, ")").ToString());
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(TimeActivityMappingDTO.CarrierTime)" Width="25px">
                <HeaderTemplate>
                    Carrier<br />Time
                </HeaderTemplate>
            </GridColumn>
            <GridColumn Field="@nameof(TimeActivityMappingDTO.CarrierActivity)"  Width="25px">
                <HeaderTemplate>
                    Carrier<br />Activity
                </HeaderTemplate>
            </GridColumn>
            <GridColumn Field="@nameof(TimeActivityMappingDTO.PolicyYearStart)" Width="25px">
                <HeaderTemplate>
                    Policy Year<br />Start
                </HeaderTemplate>
            </GridColumn>
            <GridColumn Field="@nameof(TimeActivityMappingDTO.PolicyYearEnd)" Width="25px">
                <HeaderTemplate>
                    Policy Year<br />End
                </HeaderTemplate>
            </GridColumn>           
            <GridColumn Field="@nameof(TimeActivityMappingDTO.TimeCode)" Title="Time Code" Width="25px">
                <HeaderTemplate>
                    Time<br />Code
                </HeaderTemplate>
            </GridColumn>
            <GridColumn Field="Activity.Description" Width="25px">
                <HeaderTemplate>
                    Transaction<br />Type
                </HeaderTemplate>
                <Template>
                    @{
                        TimeActivityMappingDTO? record = (context as TimeActivityMappingDTO);
                        @(record.Activity?.Description)
                        ;
                    }
                </Template>
            </GridColumn>            
            <GridColumn Field="@nameof(TimeActivityMappingDTO.CompensableIndicatorBoolean)" Width="25px">
                <HeaderTemplate>
                    Compensable<br />Indicator
                </HeaderTemplate>
            </GridColumn>
            <GridCommandColumn Width="50px" Context="timeActivityMappingContext">
                <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy">
                    <Authorized>
                        @{
                            TimeActivityMappingDTO? record = (timeActivityMappingContext as TimeActivityMappingDTO);
                            <NavLink class="btn btn-primary" href="@($"timeactivitymapping/timeactivitymappingUpdate/{record?.Id}")">Edit</NavLink>
                            <NavLink class="btn btn-secondary" @onclick=" (args) => ConfirmDelete(args, record.Id)">Delete</NavLink>
                            <DeleteModal ModalTitle="Time Activity Mapping" BodyText="Are you sure you want to delete this mapping ?"
                                 PrimaryButtonText="Delete" SecondaryButtonText="Cancel" Id=record.Id
                                 SelectedMethod="DeleteMapping">
                            </DeleteModal>
                        }
                    </Authorized>
                </AuthorizeView>
            </GridCommandColumn>
        </GridColumns>
        <GridToolBar>
            <div class="col d-flex justify-content-end">
                <div>
                    <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy">
                        <Authorized>
                            <NavLink class="btn btn-primary" href="timeactivitymapping/timeactivitymappingInsert">New</NavLink>
                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>
        </GridToolBar>
    </TelerikGrid>
}
else
{
    <div class="loader-container">
        <span class="loader-size-title">Fetching data</span>
        <TelerikLoader Class="loader-indicator" Type="@LoaderType.ConvergingSpinner" Size="@(ThemeConstants.Loader.Size.Large)"></TelerikLoader>
    </div>
}

@code {
    private IEnumerable<TimeActivityMappingDTO> TimeActivityMappingList { get; set; }
    int PageSize = 10;
    string Height = "400px";
    private List<int?> PageSizes => new List<int?> { 5, 10, 25, 50, null };
    private bool DeleteOperation = false;
    private string ErrorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        await GetGridData();
        await base.OnInitializedAsync();
    }

    async Task GetGridData()
    {
        TimeActivityMappingList = await timeActivityMappingService.GetAll();
    }

    private async Task ConfirmDelete(MouseEventArgs e, int id)
    {
        // modify the function to display modal window
        await jsRuntime.InvokeVoidAsync("DisplayModal", "DeleteModal_" + id.ToString());
    }

    private async Task DeleteMapping(int id)
    {
        try
        {
            DeleteOperation = false;
            // Perform delete mapping
            await timeActivityMappingService.Delete(id);
            await GetGridData();
            DeleteOperation = true;
            ErrorMessage = null;

        }
        catch (Exception ex)
        {
            DeleteOperation = false;
            ErrorMessage = ex.Message.ToString();
        }
    }
}
<style>
    .loader-size-title {
        display: block;
        margin-bottom: 10px;
    }

    .loader-container {
        text-align: center;
        width: 150px;
        display: inline-table;
        padding-top: 10px;
        position: absolute;
        left: 50%;
    }
</style>
