@page "/timeactivitymapping/timeactivitymappingInsert"
@page "/timeactivitymapping/timeactivitymappingUpdate/{Id:int}"
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Policy = ConstantClass.MaintenanceRolePolicy)]
@using PLD.Blazor.Common;

@inject ICarrierService carrierService
@inject IActivityService activityService
@inject ITimeActivityMappingService timeActivityMappingService


@if (@Id == 0)
{
    <h3>New Time and Activity Mapping</h3>
}
else
{
    <h3>Update Time and Activity Mapping</h3>
}

@if (_saveOperation == true)
{
    <span>Time Activity Mapping successfully saved</span>
    <br />
}

<div class="container border mt-2 p-4">
    @if (_timeActivityMapping != null) {
        <EditForm Model="@_timeActivityMapping" OnValidSubmit="UpsertTimeActivityMapping">
            <DataAnnotationsValidator/>
            <CustomFormValidator @ref="_customFormValidator" />
            <div class="row mb-3">
                <div class="col">
                    <ValidationSummary />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_timeActivityMapping.Carrier.Name)" class="col-2 col-form-label text-end">Carrier</label>
                <div class="col-3">
                    <InputSelect @bind-Value="_timeActivityMapping.CarrierId" class="form-select">
                        <option value="0" disabled="disabled" selected>--Select Carrier--</option>
                        @foreach (var carrier in (_carrierList= _carrierList ?? new List<CarrierDTO>()) )
                        {
                            <option value="@carrier.Id">@carrier.Name</option>
                        }
                    </InputSelect>
                </div>
                <label for="@nameof(_timeActivityMapping.CarrierTime)" class="col-4 col-form-label text-end">Carrier Time</label>
                <div class="col-3">
                    <input type="text" @bind-value="_timeActivityMapping.CarrierTime" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_timeActivityMapping.CarrierActivity)" class="col-2 col-form-label text-end">Carrier Activity</label>
                <div class="col-3">
                    <input type="text" @bind-value="_timeActivityMapping.CarrierActivity" class="form-control" />
                </div>
                <label for="@nameof(_timeActivityMapping.PolicyYearStart)" class="col-4 col-form-label text-end">Policy Year Start</label>
                <div class="col-3">
                    <input type="number" @bind-value="_timeActivityMapping.PolicyYearStart" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_timeActivityMapping.PolicyYearEnd)" class="col-2 col-form-label text-end">Policy Year End</label>
                <div class="col-3">
                    <input type="number" @bind-value="_timeActivityMapping.PolicyYearEnd" class="form-control" />
                </div>
                <label for="@nameof(_timeActivityMapping.TimeCode)" class="col-4 col-form-label text-end">Time Code</label>
                <div class="col-3">
                    <input type="text" @bind-value="_timeActivityMapping.TimeCode" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_timeActivityMapping.Activity.Description)" class="col-2 col-form-label text-end">Transaction Type</label>
                <div class="col-3">
                    <InputSelect @bind-Value="_timeActivityMapping.TransactionType" class="form-select">
                        <option value=null disabled="disabled" selected>--Select Transaction Type--</option>
                        @foreach (var activity in (_activityList = _activityList ?? new List<ActivityDTO>()))
                        {
                            <option value="@activity.Code">@activity.Description</option>
                        }
                    </InputSelect>
                </div>
                <label for="@nameof(_timeActivityMapping.CompensableIndicator)" class="col-4 col-form-label text-end">Compensable Indicator</label>
                <div class="col-3">
                    <InputSelect @bind-Value="_timeActivityMapping.CompensableIndicator" class="form-select">
                        <option value=null disabled="disabled" selected>--Select Indicator--</option>
                        <option value="Y">True</option>
                        <option value="N">False</option>
                    </InputSelect>
                </div>
            </div>
            <div class="row mb-3">
                <div class="offset-5 col-7">
                    <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy" Context="authorizedContext">
                        <Authorized>
                            <button class="btn btn-primary">Save</button>
                        </Authorized>
                        <NotAuthorized>
                            <button class="btn btn-primary" disabled>Save</button>
                        </NotAuthorized>
                    </AuthorizeView>
                    <NavLink class="btn btn-secondary" href="timeactivitymapping">Back</NavLink>
                </div>
            </div>
        </EditForm>
    }

</div>
@code {

    #region Parameters

        [Parameter]
        public int Id { get; set; }

    #endregion
    
    #region Fields
    
        private TimeActivityMappingDTO? _timeActivityMapping;
        private IEnumerable<CarrierDTO>? _carrierList;
        private IEnumerable<ActivityDTO>? _activityList;
        private bool _saveOperation = false;
        private CustomFormValidator? _customFormValidator;

    #endregion

    #region Methods

    protected override async Task OnInitializedAsync()
    {
        await PopulateForm();

        if (@Id == 0)
        {
            _timeActivityMapping = new TimeActivityMappingDTO();
        }
        else
        {
            _timeActivityMapping = await timeActivityMappingService.GetById(@Id);
        }

        await base.OnInitializedAsync();
    }

    private async Task PopulateForm()
    {
        _carrierList = await carrierService.GetAll();
        _activityList = await activityService.GetAll();
    }

    private async Task UpsertTimeActivityMapping()
    {
        _customFormValidator?.ClearFormErrors();
        var errors = new Dictionary<string, List<string>>();
        try
        {
            _saveOperation = false;
            if (_timeActivityMapping?.Id == 0)
            {
                var record = await timeActivityMappingService.GetByCarrierIdCarrierTimeCarrierActivityPolicyYearStartPolicyYearEnd(
                    _timeActivityMapping.CarrierId,
                    _timeActivityMapping.CarrierActivity == null ? String.Empty: _timeActivityMapping.CarrierActivity,
                    _timeActivityMapping.PolicyYearStart,
                    _timeActivityMapping.PolicyYearEnd,
                    _timeActivityMapping.CarrierTime
                );

                if (record != null)
                {

                    errors.Add(nameof(_timeActivityMapping.CarrierActivity),
                    new() { ConstantClass.TimeActivityMappingCannotAddRecordCombinationUsed });
                    _customFormValidator?.DisplayFormErrors(errors);
                }
                else
                {
                    // Insert Procedure.
                    if (_timeActivityMapping.Id == 0)
                    {
                        _timeActivityMapping.CreatedBy = ConstantClass.SystemUser;
                        _timeActivityMapping.CreatedDate = System.DateTime.Now;
                        _timeActivityMapping = await timeActivityMappingService.Create(_timeActivityMapping);
                    }
                    _saveOperation = true;
                }
            }
            else
            {
                var record = await timeActivityMappingService.GetByCarrierIdCarrierTimeCarrierActivityPolicyYearStartPolicyYearEndAndNotById(
                    (_timeActivityMapping = _timeActivityMapping ?? new TimeActivityMappingDTO()).CarrierId,
                    _timeActivityMapping.CarrierActivity == null ? String.Empty:_timeActivityMapping.CarrierActivity,
                    _timeActivityMapping.PolicyYearStart,
                    _timeActivityMapping.PolicyYearEnd,
                    _timeActivityMapping.Id,
                    _timeActivityMapping.CarrierTime
                );

                if (record != null && record.Any())
                {
                    errors.Add(nameof(_timeActivityMapping.CarrierActivity),
                    new() { ConstantClass.TimeActivityMappingCannotUpdateRecordCombinationUsed });
                    _customFormValidator?.DisplayFormErrors(errors);
                }
                else
                {
                    // Update the record
                    _timeActivityMapping.ModifiedBy = ConstantClass.SystemUser;
                    _timeActivityMapping.ModifiedDate = System.DateTime.Now;
                    await timeActivityMappingService.Update(_timeActivityMapping);
                    _saveOperation = true;
                }
            }
        }
        catch (Exception ex)
        {
            errors.Add(nameof(_timeActivityMapping.CarrierActivity),
                    new() { ex.Message });
            _customFormValidator?.DisplayFormErrors(errors);
            _saveOperation = false;
        }
    }

    #endregion

    
}
