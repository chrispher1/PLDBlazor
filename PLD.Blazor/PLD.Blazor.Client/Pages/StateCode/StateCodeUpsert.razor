@page "/stateCode/stateCodeUpdate/{Action}/{Code}"
@page "/stateCode/stateCodeInsert/{Action}"

@using Microsoft.AspNetCore.Authorization;

@attribute [Authorize(Policy = ConstantClass.MaintenanceRolePolicy)]

@inject IStateCodeService _stateCodeService

@if (Action == ConstantClass.AddAction)
{
    <h3>New State Code</h3>
}
else if (Action == ConstantClass.EditAction)
{
    <h3>Update State Code</h3>
}

@if (_saveOperation == true)
{
    <span>State Code successfully saved</span>
    <br />
}

<div class="container border mt-2 p-4">
    @if (_stateCode != null)
    {
        <EditForm Model="@_stateCode" OnValidSubmit="UpsertStateCode">
            <DataAnnotationsValidator />
            <CustomFormValidator @ref="_customFormValidator" />
            <div class="row mb-3">
                <div class="col">
                    <ValidationSummary />
                </div>
            </div>
            <div class="row mb-3">
                <label for="@nameof(_stateCode.Code)" class="col-2 col-form-label text-end">Code</label>
                <div class="col-3">
                    <input type="text" @bind="_stateCode.Code" class="form-control" />
                </div>
                <label for="@nameof(_stateCode.Name)" class="col-4 col-form-label text-end">Description</label>
                <div class="col-3">
                    <input type="text" @bind="_stateCode.Name" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="offset-5 col-7">
                    <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy" Context="authorizedContext">
                        <Authorized>
                            <button class="btn btn-primary">Save</button>
                        </Authorized>
                        <NotAuthorized>
                            <button class="btn btn-primary" disabled>Save</button>
                        </NotAuthorized>
                    </AuthorizeView>
                    <NavLink class="btn btn-secondary" href="stateCode">Back</NavLink>
                </div>
            </div>
        </EditForm>
    }

</div>

@code {

    #region Parameters
    
    [Parameter]
    public string? Code { get; set; }
    [Parameter]
    public string? Action { get; set; }

    #endregion Parameters

    #region Fields

        private StateCodeDTO? _stateCode;
        private bool _saveOperation = false;
        protected CustomFormValidator? _customFormValidator;

    #endregion Fields

    #region Events

        protected override async Task OnInitializedAsync()
        {

            if (String.IsNullOrEmpty(@Code))
            {
                _stateCode = new StateCodeDTO();
            }
            else
            {
                // Populate _stateCode if already exists
                _stateCode = await _stateCodeService.GetByCode(Code);
            }

            await base.OnInitializedAsync();
        }

    #endregion Events
    
    #region Methods    

    private async Task UpsertStateCode()
    {
        _customFormValidator?.ClearFormErrors();
        var errors = new Dictionary<string, List<string>>();
        try
        {
            _saveOperation = false;
            var record = await _stateCodeService.GetByCode(_stateCode?.Code ?? "");

            if (Action == ConstantClass.EditAction)
            {
                if (record != null)
                {
                    // Update the record
                    (_stateCode = _stateCode ?? new StateCodeDTO()).ModifiedBy = ConstantClass.SystemUser;
                    _stateCode.ModifiedDate = System.DateTime.Now;
                    await _stateCodeService.Update(_stateCode);
                    _saveOperation = true;
                }
                else
                {
                    errors.Add(nameof(_stateCode.Code),
                    new() { ConstantClass.StateCodeCannotUpdateRecordCodeNotExists });
                    _customFormValidator?.DisplayFormErrors(errors);
                }
            }
            else if (Action == ConstantClass.AddAction)
            {
                if (record != null)
                {
                    errors.Add(nameof(_stateCode.Code),
                    new() { ConstantClass.StateCodeCannotAddRecordCodeUsed });
                    _customFormValidator?.DisplayFormErrors(errors);
                }
                else
                {
                    (_stateCode = _stateCode ?? new StateCodeDTO()).CreatedBy = ConstantClass.SystemUser;
                    _stateCode.CreatedDate = System.DateTime.Now;
                    _stateCode = await _stateCodeService.Create(_stateCode);
                    _saveOperation = true;
                    Action = ConstantClass.EditAction;
                }
            }
        }
        catch (Exception ex)
        {
            errors.Add(nameof(_stateCode.Code),
                    new() { ex.Message });
            _customFormValidator?.DisplayFormErrors(errors);
            _saveOperation = false;
        }
    }

    #endregion Methods
}
