@page "/stateCode"

@using Telerik.DataSource.Extensions;
@using Microsoft.AspNetCore.Authorization;

@attribute [Authorize(Policy = ConstantClass.MaintenanceRolePolicy)]

@inject IStateCodeService stateCodeService
@inject IJSRuntime jsRuntime

<h3>State Code</h3>

@if (_deleteOperation == true)
{
    <span>State Code successfully deleted</span>
    <br />
}

@if (_errorMessage != null)
{
    <span>@_errorMessage</span>
    <br />
    <br />
}

@if (_stateCodeList != null)
{
    <TelerikGrid Data="@_stateCodeList"
             Sortable=true
             Pageable=true
             @bind-PageSize="@_pageSize"
             FilterMode="@GridFilterMode.FilterRow"
             Height="@_height">
        <GridSettings>
            <GridPagerSettings PageSizes="@_pageSizes"></GridPagerSettings>
        </GridSettings>
        <GridColumns>
            <GridColumn Field="@nameof(StateCodeDTO.Code)" Title="Mode" Width="50px">
                <Template>
                    @{
                        StateCodeDTO? record = (context as StateCodeDTO);
                        @(record?.Code.ToString())
                        ;
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(StateCodeDTO.Name)" Width="195px">
                <HeaderTemplate>
                    Name
                </HeaderTemplate>
            </GridColumn>
            <GridCommandColumn Width="35px" Context="stateCodeContext">
                <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy">
                    <Authorized>
                        @{
                            StateCodeDTO? record = (stateCodeContext as StateCodeDTO);
                            <NavLink class="btn btn-primary" href="@($"stateCode/stateCodeUpdate/Edit/{record?.Code}")">Edit</NavLink>
                            <NavLink class="btn btn-secondary" @onclick=" (args) => ConfirmDelete(args, record?.Code == null ? String.Empty: record.Code )">Delete</NavLink>
                            <DeleteModal ModalTitle="State Code" BodyText="Are you sure you want to delete this record ?"
                                 PrimaryButtonText="Delete" SecondaryButtonText="Cancel" Code="@record?.Code"
                                 SelectedMethodForString="DeleteStateCode">
                            </DeleteModal>
                        }
                    </Authorized>
                </AuthorizeView>
            </GridCommandColumn>
        </GridColumns>
        <GridToolBarTemplate>
            <div class="col d-flex justify-content-end">
                <div>
                    <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy">
                        <Authorized>
                            <NavLink class="btn btn-primary" href="stateCode/stateCodeInsert/Add">New</NavLink>
                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>
        </GridToolBarTemplate>
    </TelerikGrid>
}
else
{
    <div class="loader-container">
        <span class="loader-size-title">Fetching data</span>
        <TelerikLoader Class="loader-indicator" Type="@LoaderType.ConvergingSpinner" Size="@(ThemeConstants.Loader.Size.Large)"></TelerikLoader>
    </div>
}

@code {
    #region Fields

        private IEnumerable<StateCodeDTO>? _stateCodeList; 
        private int _pageSize = 10;
        private List<int?> _pageSizes => new List<int?> { 5, 10, 25, 50, null };
        private bool _deleteOperation = false;
        private string? _errorMessage = null;

    #endregion Fields

    #region Constants
    
        private const string _height = "400px";

    #endregion Constants

    #region Events

        protected override async Task OnInitializedAsync()
        {
            await GetGridData();
            await base.OnInitializedAsync();
        }

    #endregion Events

    #region Methods    

    private async Task ConfirmDelete(MouseEventArgs e, string code)
    {
        // modify the function to display modal window
        await jsRuntime.InvokeVoidAsync("DisplayModal", "DeleteModal_" + code);
    }

    private async Task DeleteStateCode(string code)
    {
        try
        {
            _deleteOperation = false;
            // Perform delete stateCode
            await stateCodeService.Delete(code);
            await GetGridData();
            _deleteOperation = true;
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _deleteOperation = false;
            _errorMessage = ex.Message.ToString();
        }
    }

    private async Task GetGridData()
    {
        _stateCodeList = await stateCodeService.GetAll();
    }

    #endregion Methods
}

<style>
    .loader-size-title {
        display: block;
        margin-bottom: 10px;
    }

    .loader-container {
        text-align: center;
        width: 150px;
        display: inline-table;
        padding-top: 10px;
        position: absolute;
        left: 50%;
    }
</style>
