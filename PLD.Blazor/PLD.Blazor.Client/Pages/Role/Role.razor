@page "/role"

@using Telerik.DataSource.Extensions;
@using Microsoft.AspNetCore.Authorization;

@attribute [Authorize(Policy = ConstantClass.MaintenanceRolePolicy)]

@inject IRoleService roleService
@inject IJSRuntime jsRuntime

<h3>Role</h3>

@if (_deleteOperaton == true)
{
    <span>Role successfully deleted</span>
    <br/>
}

@if(_errorMessage != null)
{
    <span>@_errorMessage</span>
    <br/>
    <br/>
}

@if (_roleList != null)
{
    <TelerikGrid Data=@_roleList
             Sortable=true
             Pageable=true
             @bind-PageSize="@_pageSize"
             FilterMode="@GridFilterMode.FilterRow"
             Height=@_height>

        <GridSettings>
            <GridPagerSettings PageSizes="@_pageSizes" />
        </GridSettings>
        <GridColumns>
            <GridColumn Field="@nameof(RoleDTO.Id)" Title="Id" Visible=false>
                <Template><input type="hidden" asp-for="@nameof(RoleDTO.Id)"> </Template>
            </GridColumn>            
            <GridColumn Field="@nameof(RoleDTO.Name)" Title="Name" Width="200px" />
            <GridCommandColumn Width="50px" Context="roleContext">
                <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy">
                    <Authorized>
                        @{
                            RoleDTO? record = (roleContext as RoleDTO);
                            <NavLink class="btn btn-primary" href="@($"role/roleUpdate/{record?.Id}")">Edit</NavLink>
                            <NavLink class="btn btn-secondary" @onclick=" (args) => ConfirmDelete(args, record?.Id == null ? 0:record.Id )">Delete</NavLink>
                            <DeleteModal ModalTitle="Role" BodyText="Are you sure you want to delete this role ?"
                                PrimaryButtonText="Delete" SecondaryButtonText="Cancel" Id=@(record?.Id == null ? 0:record.Id)
                                SelectedMethod="DeleteRole">
                            </DeleteModal>
                        }
                    </Authorized>
                </AuthorizeView>                
        </GridCommandColumn>        
    </GridColumns>    
    <GridToolBarTemplate>
        <div class="col d-flex justify-content-end">
            <AuthorizeView Policy="@ConstantClass.MaintenanceRolePolicy">
                <Authorized>
                    <div>
                        <NavLink class="btn btn-primary" href="role/roleInsert">New</NavLink>
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>
    </GridToolBarTemplate>
</TelerikGrid>
}
else
{
    <div class="loader-container">
        <span class="loader-size-title">Fetching data</span>
            <TelerikLoader Class="loader-indicator" Type="@LoaderType.ConvergingSpinner" Size="@(ThemeConstants.Loader.Size.Large)"></TelerikLoader>
        </div>
}

@code {

    #region Fields

        private IEnumerable<RoleDTO>? _roleList;
        private int _pageSize = 10;
        private List<int?> _pageSizes => new List<int?> { 5, 10, 25, 50, null };
        private bool _deleteOperaton = false;
        private string? _errorMessage = null;

    #endregion Fields
    
    #region Constants

        private const string _height = "400px";

    #endregion Constants

    #region Events

        protected override async Task OnInitializedAsync()
        {
            await GetGridData();
        }

    #endregion Events
    
    #region Methods        

        private async Task GetGridData()
        {
            _roleList = await roleService.GetAll();
        }

        private async Task ConfirmDelete(MouseEventArgs e, int id)
        {
            // modify the function to display modal window
            await jsRuntime.InvokeVoidAsync("DisplayModal", "DeleteModal_" + id.ToString());
        }

        private async Task DeleteRole(int id)
        {
            try
            {
                _deleteOperaton = false;
                // Perform delete role
                await roleService.Delete(id);
                await GetGridData();
                _deleteOperaton = true;
                _errorMessage = null;

            }
            catch (Exception ex)
            {
                _deleteOperaton = false;
                _errorMessage = ex.Message.ToString();
            }
        }

    #endregion Methods
}

<style>
    .loader-size-title {
        display: block;
        margin-bottom: 10px;
    }

    .loader-container {
        text-align: center;
        width: 150px;
        display: inline-table;
        padding-top: 10px;
        position: absolute;
        left: 50%;
    }
</style>
